[{"path":"EmilMiP.github.io/LTFHPlus/articles/FromCIPFamilyToLTFHPlusInput.html","id":"dummy-input","dir":"Articles","previous_headings":"","what":"Dummy input","title":"From CIP and family to LT-FH++ input","text":"simply simulate potential input format. create tbæ, contains information person attach thresholds . contain family member along needed information. , simply use proband family members. Next, create CIP, contains cumulative incidence proportions. CIP stratified birth year sex illustrative purposes. users CIPs stratified sex, simply one fewer columns. Please note values shown illustrative purposes.","code":"n_sim = 10 tbl = tibble(   fam_id = paste0(\"fam\", 1:n_sim),   pid = 1:n_sim,   role = rep(\"o\", n_sim),   sex = sample(x = 0:1, size = n_sim, replace = T),   status = sample(size = n_sim, x = 0:1, replace = T),   age = sample(size = n_sim, x = 1:90, replace = T),   birth_year = 2023 - age,   aoo = purrr::map2_dbl(.x = status, .y = age, .f = ~ ifelse(.x == 1, sample(size = 1, x = 1:.y), NA)) ) %>%    print() ## # A tibble: 10 × 8 ##    fam_id   pid role    sex status   age birth_year   aoo ##    <chr>  <int> <chr> <int>  <int> <int>      <dbl> <dbl> ##  1 fam1       1 o         0      1    55       1968     4 ##  2 fam2       2 o         0      0    43       1980    NA ##  3 fam3       3 o         1      0    62       1961    NA ##  4 fam4       4 o         0      0    43       1980    NA ##  5 fam5       5 o         0      0     5       2018    NA ##  6 fam6       6 o         1      1    85       1938    34 ##  7 fam7       7 o         0      0    44       1979    NA ##  8 fam8       8 o         0      0    61       1962    NA ##  9 fam9       9 o         0      1    34       1989    25 ## 10 fam10     10 o         1      1    70       1953    43 #### THIS IS DUMMY CIP. DO NOT USE FOR REAL-WORLD DATA USE #### CIP = expand.grid(list(age = 1:100,                        birth_year = 1900:2024,                        sex = 0:1)) %>%   group_by(sex, birth_year) %>%   mutate(cip = (1:n() - 1)/n() * .1) %>%   ungroup() %>%    print() ## # A tibble: 25,000 × 4 ##      age birth_year   sex   cip ##    <int>      <int> <int> <dbl> ##  1     1       1900     0 0     ##  2     2       1900     0 0.001 ##  3     3       1900     0 0.002 ##  4     4       1900     0 0.003 ##  5     5       1900     0 0.004 ##  6     6       1900     0 0.005 ##  7     7       1900     0 0.006 ##  8     8       1900     0 0.007 ##  9     9       1900     0 0.008 ## 10    10       1900     0 0.009 ## # ℹ 24,990 more rows #### THIS IS DUMMY CIP. DO NOT USE FOR REAL-WORLD DATA USE ####"},{"path":"EmilMiP.github.io/LTFHPlus/articles/FromCIPFamilyToLTFHPlusInput.html","id":"preparing-input","dir":"Articles","previous_headings":"","what":"Preparing input","title":"From CIP and family to LT-FH++ input","text":"Assigning thresholds person tbl can now done function prepare_LTFHPlus_input. thresholds can assigned two ways. first matching directly combinations birth year, sex, age person combinations present CIP object. second uses interpolation predict CIP value observed combinations birth year, sex, age present CIP object. Currently, interpolation xgboost package supported. interpolation can useful, since real-world data often lead ages age onsets can expressed decimals rounding may lead large jumps CIP values. outputs can subset required information left. direct input estimate_liability(), family personal id columns needed well role (graph input used) lower upper columns.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/articles/FromCIPFamilyToLTFHPlusInput.html","id":"no-interpolation","dir":"Articles","previous_headings":"Preparing input","what":"No interpolation","title":"From CIP and family to LT-FH++ input","text":"Without using interpolation, meaning match combinations birth year, sex age present tbl CIP objects. thresholds can assigned following way:","code":"tbl2 = prepare_LTFHPlus_input(.tbl = tbl,                               CIP = CIP,                                age_col = \"age\",                               aoo_col = \"aoo\",                               CIP_merge_columns = c(\"age\",\"birth_year\", \"sex\"),                               CIP_cip_col = \"cip\",                               status_col = \"status\",                               use_fixed_case_thr = F,                               fam_id_col = \"fam_id\",                               personal_id_col = \"pid\",                               interpolation = NA,                               min_CIP_value = 1e-4) tbl2 ## # A tibble: 10 × 12 ##    fam_id   pid role    sex status   age birth_year   aoo   cip   thr   lower ##    <chr>  <int> <chr> <int>  <int> <dbl>      <dbl> <dbl> <dbl> <dbl>   <dbl> ##  1 fam1       1 o         0      1     4       1968     4 0.003  2.75    2.75 ##  2 fam2       2 o         0      0    43       1980    NA 0.042  1.73 -Inf    ##  3 fam3       3 o         1      0    62       1961    NA 0.061  1.55 -Inf    ##  4 fam4       4 o         0      0    43       1980    NA 0.042  1.73 -Inf    ##  5 fam5       5 o         0      0     5       2018    NA 0.004  2.65 -Inf    ##  6 fam6       6 o         1      1    34       1938    34 0.033  1.84    1.84 ##  7 fam7       7 o         0      0    44       1979    NA 0.043  1.72 -Inf    ##  8 fam8       8 o         0      0    61       1962    NA 0.06   1.55 -Inf    ##  9 fam9       9 o         0      1    25       1989    25 0.024  1.98    1.98 ## 10 fam10     10 o         1      1    43       1953    43 0.042  1.73    1.73 ## # ℹ 1 more variable: upper <dbl>"},{"path":"EmilMiP.github.io/LTFHPlus/articles/FromCIPFamilyToLTFHPlusInput.html","id":"interpolation-with-xgboost","dir":"Articles","previous_headings":"Preparing input","what":"Interpolation with Xgboost","title":"From CIP and family to LT-FH++ input","text":"decimal ages ages onset present, can interpolate cip values xgboost package. input change, except interpolate = \"xgboost\". current input data contain decimal values, illustrative purposes, use -. Parameters can passed xgboost bst.params variable.","code":"tbl2_xgb = prepare_LTFHPlus_input(.tbl = tbl,                                  CIP = CIP,                                   age_col = \"age\",                                  aoo_col = \"aoo\",                                  CIP_merge_columns = c(\"age\",\"birth_year\", \"sex\"),                                  CIP_cip_col = \"cip\",                                  status_col = \"status\",                                  use_fixed_case_thr = F,                                  fam_id_col = \"fam_id\",                                  personal_id_col = \"pid\",                                  interpolation = \"xgboost\",                                   xgboost_itr = 30,                                  min_CIP_value = 1e-4) ## [1]  train-rmse:0.040135  ## [2]  train-rmse:0.028111  ## [3]  train-rmse:0.019688  ## [4]  train-rmse:0.013790  ## [5]  train-rmse:0.009659  ## [6]  train-rmse:0.006766  ## [7]  train-rmse:0.004740  ## [8]  train-rmse:0.003321  ## [9]  train-rmse:0.002328  ## [10] train-rmse:0.001632  ## [11] train-rmse:0.001144  ## [12] train-rmse:0.000802  ## [13] train-rmse:0.000563  ## [14] train-rmse:0.000395  ## [15] train-rmse:0.000278  ## [16] train-rmse:0.000196  ## [17] train-rmse:0.000139  ## [18] train-rmse:0.000101  ## [19] train-rmse:0.000075  ## [20] train-rmse:0.000058  ## [21] train-rmse:0.000047  ## [22] train-rmse:0.000041  ## [23] train-rmse:0.000037  ## [24] train-rmse:0.000035  ## [25] train-rmse:0.000034  ## [26] train-rmse:0.000034  ## [27] train-rmse:0.000034  ## [28] train-rmse:0.000034  ## [29] train-rmse:0.000034  ## [30] train-rmse:0.000034 tbl2_xgb ## # A tibble: 10 × 13 ##    fam_id   pid role    sex status   age birth_year   aoo cip_pred event_age ##    <chr>  <int> <chr> <int>  <int> <int>      <dbl> <dbl>    <dbl>     <dbl> ##  1 fam1       1 o         0      1    55       1968     4  0.00302         4 ##  2 fam5       5 o         0      0     5       2018    NA  0.00401         5 ##  3 fam9       9 o         0      1    34       1989    25  0.0240         25 ##  4 fam6       6 o         1      1    85       1938    34  0.0330         34 ##  5 fam2       2 o         0      0    43       1980    NA  0.0420         43 ##  6 fam4       4 o         0      0    43       1980    NA  0.0420         43 ##  7 fam10     10 o         1      1    70       1953    43  0.0420         43 ##  8 fam7       7 o         0      0    44       1979    NA  0.0430         44 ##  9 fam8       8 o         0      0    61       1962    NA  0.0600         61 ## 10 fam3       3 o         1      0    62       1961    NA  0.0609         62 ## # ℹ 3 more variables: thr <dbl>, lower <dbl>, upper <dbl>"},{"path":"EmilMiP.github.io/LTFHPlus/articles/FromCIPFamilyToLTFHPlusInput.html","id":"estimating-liabilities","dir":"Articles","previous_headings":"","what":"Estimating liabilities","title":"From CIP and family to LT-FH++ input","text":", objects tbl2 tbl2_xgb can subset relevant columns used estimate_liability(). See LT-FH++ Example example . objects can also subset contain just family personal ID columns, well lower upper columns, used input prepare_graph() assign individual threshold information attributes. See LT-FH++ Graph Example details.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/articles/FromTrioToFamilies.html","id":"from-trio-information-to-graph","dir":"Articles","previous_headings":"","what":"From trio information to graph","title":"From trio information to full families","text":"trio information can used create extended families manually first identifying parents, grandparents, great-grandparents, etc.. , siblings, aunts uncles, cousins, etc.. can also identified. However, tedious process easy miss family members. developed function can find family member related degree nn closer rely tedious process identifying family role manually. example data set family. contains half-siblings, half-aunts -uncles, well cousins individuals married family. example mgm meaning maternal grandmother, hspaunt meaning paternal half-aunt, hsmuncleW meaning maternal half-uncle’s wife. object family meant represent trio information can found registers. possible multiple families input data single individuals family links. object graph directed graph constructed trio information family build using igraph package. direction graph parent offspring.","code":"family = tribble(   ~id, ~momcol, ~dadcol,   \"pid\", \"mom\", \"dad\",   \"sib\", \"mom\", \"dad\",   \"mhs\", \"mom\", \"dad2\",   \"phs\", \"mom2\", \"dad\",   \"mom\", \"mgm\", \"mgf\",   \"dad\", \"pgm\", \"pgf\",   \"dad2\", \"pgm2\", \"pgf2\",   \"paunt\", \"pgm\", \"pgf\",   \"pacousin\", \"paunt\", \"pauntH\",   \"hspaunt\", \"pgm\", \"newpgf\",   \"hspacousin\", \"hspaunt\", \"hspauntH\",   \"puncle\", \"pgm\", \"pgf\",   \"pucousin\", \"puncleW\", \"puncle\",   \"maunt\", \"mgm\", \"mgf\",   \"macousin\", \"maunt\", \"mauntH\",   \"hsmuncle\", \"newmgm\", \"mgf\",   \"hsmucousin\", \"hsmuncleW\", \"hsmuncle\" )  thrs =  tibble(  id = family %>% select(1:3) %>% unlist() %>% unique(),  lower = sample(c(-Inf, 2), size = length(id), replace = TRUE),  upper = sample(c(2, Inf), size = length(id), replace = TRUE),  sex = case_when(    id %in% family$momcol ~ \"F\",    id %in% family$dadcol ~ \"M\",    TRUE ~ NA)) %>%    mutate(sex = sapply(sex, function(x) ifelse(is.na(x), sample(c(\"M\", \"F\"), 1), x))) graph = prepare_graph(.tbl = family,                        thresholds = thrs,                       fcol = \"dadcol\",                       mcol = \"momcol\",                       icol = \"id\") graph ## IGRAPH 0343541 DN-- 31 44 --  ## + attr: name (v/c), lower (v/n), upper (v/n), sex (v/c) ## + edges from 0343541 (vertex names): ##  [1] dad     ->pid        mom     ->pid        dad     ->sib        ##  [4] mom     ->sib        dad2    ->mhs        mom     ->mhs        ##  [7] dad     ->phs        mom2    ->phs        mgf     ->mom        ## [10] mgm     ->mom        pgf     ->dad        pgm     ->dad        ## [13] pgf2    ->dad2       pgm2    ->dad2       pgf     ->paunt      ## [16] pgm     ->paunt      pauntH  ->pacousin   paunt   ->pacousin   ## [19] newpgf  ->hspaunt    pgm     ->hspaunt    hspauntH->hspacousin ## [22] hspaunt ->hspacousin pgf     ->puncle     pgm     ->puncle     ## + ... omitted several edges"},{"path":"EmilMiP.github.io/LTFHPlus/articles/FromTrioToFamilies.html","id":"from-graph-to-subgraph-and-kinship-matrix","dir":"Articles","previous_headings":"","what":"From graph to subgraph and kinship matrix","title":"From trio information to full families","text":"can construct kinship matrix family members present family, can consider family members degree nn. can identify family members degree 22 like :  particular, individuals paternal uncle’s child (.e cousin, coded pucousin ) present relatedness cut-family members degree 33.","code":"# make_ego_graph returns list, even for node input of length 1 fam_graph = make_ego_graph(graph = graph,                             order = 2,                            nodes = \"pid\")[[1]] plot(fam_graph, layout = layout_as_tree,      vertex.size = 27.5,      vertex.shape = \"rectangle\",      vertex.label.cex = .75,      edge.arrow.size = .3)"},{"path":"EmilMiP.github.io/LTFHPlus/articles/FromTrioToFamilies.html","id":"calculate-kinship-matrix","dir":"Articles","previous_headings":"","what":"Calculate kinship matrix","title":"From trio information to full families","text":"Finally, kinship matrix can calculated get_kinship() (output made nicer round) following way: function called graph_to_trio() included package, can convert graph object back trio object. function useful want use functionality packages rely trio information. One example using plotting functionality pedigrees kinship2. can used utilise powerful plotting tool kit available kinship2 package.","code":"# the kinship matrix is multiplied by 100 and rounded for illustrative purposes! round(get_kinship(fam_graph, h2 = 1, index_id = \"pid\", add_ind = FALSE) * 100, 2) ##        pid sib mhs phs mom dad paunt puncle maunt mgm pgm mgf pgf ## pid    100  50  25  25  50  50    25     25    25  25  25  25  25 ## sib     50 100  25  25  50  50    25     25    25  25  25  25  25 ## mhs     25  25 100   0  50   0     0      0    25  25   0  25   0 ## phs     25  25   0 100   0  50    25     25     0   0  25   0  25 ## mom     50  50  50   0 100   0     0      0    50  50   0  50   0 ## dad     50  50   0  50   0 100    50     50     0   0  50   0  50 ## paunt   25  25   0  25   0  50   100     50     0   0  50   0  50 ## puncle  25  25   0  25   0  50    50    100     0   0  50   0  50 ## maunt   25  25  25   0  50   0     0      0   100  50   0  50   0 ## mgm     25  25  25   0  50   0     0      0    50 100   0   0   0 ## pgm     25  25   0  25   0  50    50     50     0   0 100   0   0 ## mgf     25  25  25   0  50   0     0      0    50   0   0 100   0 ## pgf     25  25   0  25   0  50    50     50     0   0   0   0 100 trio = graph_to_trio(graph = fam_graph, fixParents = TRUE) trio ## # A tibble: 15 × 4 ##    id      momid     dadid     sex   ##    <chr>   <chr>     <chr>     <chr> ##  1 pid     \"mom\"     \"dad\"     M     ##  2 sib     \"mom\"     \"dad\"     F     ##  3 mhs     \"mom\"     \"added_2\" M     ##  4 phs     \"added_1\" \"dad\"     F     ##  5 mom     \"mgm\"     \"mgf\"     F     ##  6 maunt   \"mgm\"     \"mgf\"     F     ##  7 dad     \"pgm\"     \"pgf\"     M     ##  8 paunt   \"pgm\"     \"pgf\"     F     ##  9 puncle  \"pgm\"     \"pgf\"     M     ## 10 mgf     \"\"        \"\"        M     ## 11 pgf     \"\"        \"\"        M     ## 12 mgm     \"\"        \"\"        F     ## 13 pgm     \"\"        \"\"        F     ## 14 added_1 \"\"        \"\"        F     ## 15 added_2 \"\"        \"\"        M pedigree = with(trio,kinship2::pedigree(id = id, dadid = dadid,momid =  momid,sex =  sex))  plot(pedigree)"},{"path":"EmilMiP.github.io/LTFHPlus/articles/inputFormatExample.html","id":"what-is-the-input-format-for-ltfhplus-functions","dir":"Articles","previous_headings":"","what":"What is the input format for LTFHPlus functions?","title":"How the covariance is constructed","text":"version 2.0, updates made input functions available estimate (genetic) liability. Previously, list entry format set order expected, proband first, followed father, mother, siblings. limited analysis immediate family, information , e.g. half-siblings, grandparents etc, available, readily used. Now input require set ordering, instead user expected provide information familial relation proband, e.g. mother, paternal half-sibling, etc. allows far flexibility user include familial information available.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/articles/inputFormatExample.html","id":"family-input","dir":"Articles","previous_headings":"","what":"Family Input","title":"How the covariance is constructed","text":"function used estimate genetic (full liability) individual estimate_liability. family input input .tbl, long format row individual. role must accompany individual. family relationship proband column.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/articles/inputFormatExample.html","id":"simulate-data","dir":"Articles","previous_headings":"","what":"Simulate data","title":"How the covariance is constructed","text":"simulate_under_LTM example full input data can seen. returns list, first entry sim_obs, contains underlying liabilities, status, age onset age controls. second entry called thresholds contains family ID, individual ID, family relationship proband, lower upper threshold individual. following example simulates family index person, mother, father, single sibling. family members can also used. See documentation simulate_under_LTM() information.","code":"sims <- simulate_under_LTM(fam_vec = c(\"m\",\"f\",\"s1\"),                             n_fam = NULL,                              add_ind = TRUE,                              h2 = 0.5,                              n_sim = 10,                              pop_prev = .05)  sims$sim_obs ## # A tibble: 10 × 14 ##    fam_ID          g      o       m       f     s1 o_status m_status f_status ##    <chr>       <dbl>  <dbl>   <dbl>   <dbl>  <dbl> <lgl>    <lgl>    <lgl>    ##  1 fam_ID_1  -1.01   -0.375 -2.47   -0.0384  0.179 FALSE    FALSE    FALSE    ##  2 fam_ID_2   0.0466 -1.44  -0.310  -0.307  -0.375 FALSE    FALSE    FALSE    ##  3 fam_ID_3  -0.0259  0.520  2.11   -1.59    0.545 FALSE    TRUE     FALSE    ##  4 fam_ID_4  -1.32   -1.09  -0.468   0.127  -1.11  FALSE    FALSE    FALSE    ##  5 fam_ID_5   0.543   0.608 -0.974   1.07    1.87  FALSE    FALSE    FALSE    ##  6 fam_ID_6  -0.632  -1.14  -0.284  -1.10   -1.68  FALSE    FALSE    FALSE    ##  7 fam_ID_7   0.874   0.653  0.358   1.74    0.456 FALSE    FALSE    TRUE     ##  8 fam_ID_8  -0.601  -1.79  -0.361  -0.396   0.765 FALSE    FALSE    FALSE    ##  9 fam_ID_9  -0.135  -0.566 -0.0500 -0.252   0.343 FALSE    FALSE    FALSE    ## 10 fam_ID_10  1.53    0.752  0.708   0.248  -1.44  FALSE    FALSE    FALSE    ## # ℹ 5 more variables: s1_status <lgl>, o_aoo <dbl>, m_aoo <dbl>, f_aoo <dbl>, ## #   s1_aoo <dbl> sims$thresholds ## # A tibble: 40 × 5 ##    fam_ID    indiv_ID    role  lower upper ##    <chr>     <chr>       <chr> <dbl> <dbl> ##  1 fam_ID_1  fam_ID_1_1  o      -Inf  3.70 ##  2 fam_ID_2  fam_ID_2_1  o      -Inf  3.57 ##  3 fam_ID_3  fam_ID_3_1  o      -Inf  3.54 ##  4 fam_ID_4  fam_ID_4_1  o      -Inf  3.37 ##  5 fam_ID_5  fam_ID_5_1  o      -Inf  2.86 ##  6 fam_ID_6  fam_ID_6_1  o      -Inf  2.79 ##  7 fam_ID_7  fam_ID_7_1  o      -Inf  3.01 ##  8 fam_ID_8  fam_ID_8_1  o      -Inf  3.30 ##  9 fam_ID_9  fam_ID_9_1  o      -Inf  3.60 ## 10 fam_ID_10 fam_ID_10_1 o      -Inf  3.54 ## # ℹ 30 more rows"},{"path":"EmilMiP.github.io/LTFHPlus/articles/inputFormatExample.html","id":"covariance-function-and-examples","dir":"Articles","previous_headings":"","what":"Covariance Function and examples","title":"How the covariance is constructed","text":"construct covariance matrix family analysed run-time. covariance function used internally estimate_liability updated allow higher degree flexibility. means user provide familial relationship, construct_covmat creates corresponding covariance matrix based heritability expected genetic overlap two individuals. construct_covmat defaults family structure parents, one sibling, paternal maternal grandparents. input format construct_covmat can specified two different ways, either fam_vec (method used internally estimate_liability) n_fam. fam_vec vector strings list possible familial relationships must provided full list, please see documentation construct_covmat. Family members appear covariance matrix order appear fam_vec. n_fam named vector provided, names named vector corresponding familial relationship values vector corresponds often particular familial role appears. order illustrate different possible families, provide examples. family information available, age onset information still available, can use simplest covariance, contains genetic full liability index person: default family contains index person well father, mother, one sibling, maternal paternal grandparents. mother father example, illustrate covariance accounting family members either mother’s father’s side. Assuming genetic overlap two sides family.","code":"# no family members construct_covmat(fam_vec = NULL, n_fam = NULL, h2 = .5) ## Warning in construct_covmat_single(fam_vec = fam_vec, n_fam = n_fam, add_ind = add_ind, : Neither fam_vec nor n_fam is specified... ##     g   o ## g 0.5 0.5 ## o 0.5 1.0 ## attr(,\"fam_vec\") ## [1] \"g\" \"o\" ## attr(,\"n_fam\") ## g o  ## 1 1  ## attr(,\"add_ind\") ## [1] TRUE ## attr(,\"h2\") ## [1] 0.5 construct_covmat() ##         g     o    m    f    s1   mgm   mgf   pgm   pgf ## g   0.500 0.500 0.25 0.25 0.250 0.125 0.125 0.125 0.125 ## o   0.500 1.000 0.25 0.25 0.250 0.125 0.125 0.125 0.125 ## m   0.250 0.250 1.00 0.00 0.250 0.250 0.250 0.000 0.000 ## f   0.250 0.250 0.00 1.00 0.250 0.000 0.000 0.250 0.250 ## s1  0.250 0.250 0.25 0.25 1.000 0.125 0.125 0.125 0.125 ## mgm 0.125 0.125 0.25 0.00 0.125 1.000 0.000 0.000 0.000 ## mgf 0.125 0.125 0.25 0.00 0.125 0.000 1.000 0.000 0.000 ## pgm 0.125 0.125 0.00 0.25 0.125 0.000 0.000 1.000 0.000 ## pgf 0.125 0.125 0.00 0.25 0.125 0.000 0.000 0.000 1.000 ## attr(,\"fam_vec\") ## [1] \"g\"   \"o\"   \"m\"   \"f\"   \"s1\"  \"mgm\" \"mgf\" \"pgm\" \"pgf\" ## attr(,\"n_fam\") ##  ##   f   g   m mgf mgm   o pgf pgm   s  ##   1   1   1   1   1   1   1   1   1  ## attr(,\"add_ind\") ## [1] TRUE ## attr(,\"h2\") ## [1] 0.5 construct_covmat(fam_vec = c(\"m\", \"f\"), h2 = .5) ##      g    o    m    f ## g 0.50 0.50 0.25 0.25 ## o 0.50 1.00 0.25 0.25 ## m 0.25 0.25 1.00 0.00 ## f 0.25 0.25 0.00 1.00 ## attr(,\"fam_vec\") ## [1] \"g\" \"o\" \"m\" \"f\" ## attr(,\"n_fam\") ##  ## f g m o  ## 1 1 1 1  ## attr(,\"add_ind\") ## [1] TRUE ## attr(,\"h2\") ## [1] 0.5 construct_covmat(fam_vec = c(\"f\", \"m\", \"mgm\", \"pgm\", \"mhs1\", \"phs1\", \"mau\", \"pau\"), h2 = .5) ##          g     o    f    m   mgm   pgm  mhs1  phs1   mau   pau ## g    0.500 0.500 0.25 0.25 0.125 0.125 0.125 0.125 0.125 0.125 ## o    0.500 1.000 0.25 0.25 0.125 0.125 0.125 0.125 0.125 0.125 ## f    0.250 0.250 1.00 0.00 0.000 0.250 0.000 0.250 0.000 0.250 ## m    0.250 0.250 0.00 1.00 0.250 0.000 0.250 0.000 0.250 0.000 ## mgm  0.125 0.125 0.00 0.25 1.000 0.000 0.125 0.000 0.250 0.000 ## pgm  0.125 0.125 0.25 0.00 0.000 1.000 0.000 0.125 0.000 0.250 ## mhs1 0.125 0.125 0.00 0.25 0.125 0.000 1.000 0.000 0.125 0.000 ## phs1 0.125 0.125 0.25 0.00 0.000 0.125 0.000 1.000 0.000 0.125 ## mau  0.125 0.125 0.00 0.25 0.250 0.000 0.125 0.000 1.000 0.000 ## pau  0.125 0.125 0.25 0.00 0.000 0.250 0.000 0.125 0.000 1.000 ## attr(,\"fam_vec\") ##  [1] \"g\"    \"o\"    \"f\"    \"m\"    \"mgm\"  \"pgm\"  \"mhs1\" \"phs1\" \"mau\"  \"pau\"  ## attr(,\"n_fam\") ##  ##   f   g   m mau mgm mhs   o pau pgm phs  ##   1   1   1   1   1   1   1   1   1   1  ## attr(,\"add_ind\") ## [1] TRUE ## attr(,\"h2\") ## [1] 0.5"},{"path":"EmilMiP.github.io/LTFHPlus/articles/LTFHPlus.html","id":"a-word-on-the-examples","dir":"Articles","previous_headings":"","what":"A word on the examples","title":"LTFHPlus","text":"examples included meant represent simple application method, users able get good idea use functions package expect output. genetic liabilities meant used phenotype genome-wide association studies(GWAS). recommend using software PLINK, BOLT, Regenie, R-based methods bigsnpr perform GWAS.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/articles/LTFHPlus.html","id":"what-would-you-like-to-read-about","dir":"Articles","previous_headings":"","what":"What would you like to read about?","title":"LTFHPlus","text":"overview can learn : CIP family information look like? input format like format family relationship like covariance matrix use family relationship Example Simulate phenotypic data liability threshold Estimating genetic liability parallelization","code":""},{"path":"EmilMiP.github.io/LTFHPlus/articles/LTFHPlusExample.html","id":"setting-up-input","dir":"Articles","previous_headings":"","what":"Setting up input","title":"LT-FH++ Example","text":"Single trait LT-FH++ requires 3 types input, namely liability-scale heritability, family relationships status, age age onset, sex, birth year family member, finally cumulative incidence proportions (CIPs). detailed cumulative incidence proportions, better. LT-FH++ paper, used CIPs stratified birth year sex fixed upper lower liability threshold cases Φ(1−CIP)\\Phi(1 - CIP), since provided accurate estimate full liability. CIP curve function age, age represented age onset current age control. less detailed information, CIPs stratified sex, birth year, recommend setting lower threshold Φ(1−CIP)\\Phi(1 - CIP) upper limit infinity cases. information, thresholds needed age-dependent liability threshold model can assigned. provided function called prepare_LTFHPlus_input can help users convert input suitable format. example input may look use function can found CIP family LT-FH++ input.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/articles/LTFHPlusExample.html","id":"generating-phenotypes","dir":"Articles","previous_headings":"","what":"Generating phenotypes","title":"LT-FH++ Example","text":"implemented function allows users simulate liability threshold model given family structure, .e. mother, father, sibling, sibling1, sibling2, child1, child2, etc. function simply needs family structure, heritability, population prevalence.simplicity’s sake, use prevalence sexes. However, worth noting real-world applications, cumulative incidence proportions needed thresholds, rarely identical sexes. function simulate_under_LTM outputs list two tibbles. first one sim_obs contains underlying liabilities, status, age age onset family family members. second tibble thresholds contains formatted input ready input estimate genetic liability. thresholds keeps track families family members fam_id indiv_id. simply use dummy variables . real-world data, indiv_id usually pseudonymized identifier unique individual. total freedom set fam_id whatever, long unique family. One choice pseudonymized identifier index person family, simply numerate families 11 total number families. Next, role identifies family member’s relationship index person. follow system shown documentation construct_covmat. family member fit one shown, suitable covariance matrix constructed. detailed family structures needed, please contact one maintainers LTFHPlus. Finally, lower upper liability thresholds provided family member. Previously, utilised list lists R link information correct individuals. Going forward, still support format, order ease use non-R users, opted long format, row indivdual instead family, input can generated user’s preferred software.","code":"sims <- simulate_under_LTM(fam_vec = c(\"m\",\"f\",\"s1\"),                             n_fam = NULL,                             add_ind = TRUE,                             h2 = h2,                             n_sim = 10,                             pop_prev = .1) sims ## $sim_obs ## # A tibble: 10 × 14 ##    fam_ID          g      o       m       f     s1 o_status m_status f_status ##    <chr>       <dbl>  <dbl>   <dbl>   <dbl>  <dbl> <lgl>    <lgl>    <lgl>    ##  1 fam_ID_1  -1.01   -0.375 -2.47   -0.0384  0.179 FALSE    FALSE    FALSE    ##  2 fam_ID_2   0.0466 -1.44  -0.310  -0.307  -0.375 FALSE    FALSE    FALSE    ##  3 fam_ID_3  -0.0259  0.520  2.11   -1.59    0.545 FALSE    TRUE     FALSE    ##  4 fam_ID_4  -1.32   -1.09  -0.468   0.127  -1.11  FALSE    FALSE    FALSE    ##  5 fam_ID_5   0.543   0.608 -0.974   1.07    1.87  FALSE    FALSE    FALSE    ##  6 fam_ID_6  -0.632  -1.14  -0.284  -1.10   -1.68  FALSE    FALSE    FALSE    ##  7 fam_ID_7   0.874   0.653  0.358   1.74    0.456 FALSE    FALSE    TRUE     ##  8 fam_ID_8  -0.601  -1.79  -0.361  -0.396   0.765 FALSE    FALSE    FALSE    ##  9 fam_ID_9  -0.135  -0.566 -0.0500 -0.252   0.343 FALSE    FALSE    FALSE    ## 10 fam_ID_10  1.53    0.752  0.708   0.248  -1.44  FALSE    FALSE    FALSE    ## # ℹ 5 more variables: s1_status <lgl>, o_aoo <dbl>, m_aoo <dbl>, f_aoo <dbl>, ## #   s1_aoo <dbl> ##  ## $thresholds ## # A tibble: 40 × 5 ##    fam_ID    indiv_ID    role  lower upper ##    <chr>     <chr>       <chr> <dbl> <dbl> ##  1 fam_ID_1  fam_ID_1_1  o      -Inf  3.52 ##  2 fam_ID_2  fam_ID_2_1  o      -Inf  3.38 ##  3 fam_ID_3  fam_ID_3_1  o      -Inf  3.35 ##  4 fam_ID_4  fam_ID_4_1  o      -Inf  3.17 ##  5 fam_ID_5  fam_ID_5_1  o      -Inf  2.63 ##  6 fam_ID_6  fam_ID_6_1  o      -Inf  2.55 ##  7 fam_ID_7  fam_ID_7_1  o      -Inf  2.79 ##  8 fam_ID_8  fam_ID_8_1  o      -Inf  3.10 ##  9 fam_ID_9  fam_ID_9_1  o      -Inf  3.42 ## 10 fam_ID_10 fam_ID_10_1 o      -Inf  3.35 ## # ℹ 30 more rows"},{"path":"EmilMiP.github.io/LTFHPlus/articles/LTFHPlusExample.html","id":"generating-your-own-input-data","dir":"Articles","previous_headings":"Generating phenotypes","what":"Generating your own input data","title":"LT-FH++ Example","text":"like use LTFHPlus, can provide template input format. object sims list two entries, namely sim_obs thresholds. values sim_obs values true underlying liabilities, simulated ages onset ages. etc.. values thresholds ready used estimate_liability(). Generating input ones register data can tedious, requires identifying parents (role parents mm ff), one can identify siblings (roles siblings s1,s2,etc.s1, s2, etc.), available roles. available roles can seen documentation estimate_liability().","code":""},{"path":"EmilMiP.github.io/LTFHPlus/articles/LTFHPlusExample.html","id":"running-lt-fh","dir":"Articles","previous_headings":"","what":"Running LT-FH++","title":"LT-FH++ Example","text":"input parameters generated chosen heritability, everything need run LT-FH++. highly recommend package Future parallelize computations LT-FH++. Since modern computers 2 cores available , available users. user able parallelize, LTFHPlus can still used, far slower. future framework also allows easy use high performance computing (HPC) clusters. example, utilize 4 threads. object simu_liab can saved used GWAS method choice.","code":"#Setting up parallelization backend plan(tweak(multisession, workers = nthreads)) #performs LT-FH++ analysis simu_liab = estimate_liability(.tbl = sims$thresholds,                                h2 = h2,                                pid = \"indiv_ID\",                                fam_id = \"fam_ID\",                                role = \"role\") ## The number of workers is 4 simu_liab ## # A tibble: 10 × 4 ##    fam_ID    indiv_ID  genetic_est genetic_se ##    <chr>     <chr>           <dbl>      <dbl> ##  1 fam_ID_1  fam_ID_1      -0.0327    0.00400 ##  2 fam_ID_2  fam_ID_2      -0.0271    0.00423 ##  3 fam_ID_3  fam_ID_3       0.504     0.00357 ##  4 fam_ID_4  fam_ID_4      -0.0262    0.00449 ##  5 fam_ID_5  fam_ID_5       0.377     0.00341 ##  6 fam_ID_6  fam_ID_6      -0.0694    0.00393 ##  7 fam_ID_7  fam_ID_7       0.409     0.00340 ##  8 fam_ID_8  fam_ID_8      -0.0198    0.00422 ##  9 fam_ID_9  fam_ID_9      -0.0188    0.00415 ## 10 fam_ID_10 fam_ID_10     -0.0156    0.00418"},{"path":"EmilMiP.github.io/LTFHPlus/articles/LTFHPlusGraphExample.html","id":"automatic-family-construction","dir":"Articles","previous_headings":"","what":"Automatic family construction","title":"LT-FH++ Graph Example","text":"Manually constructing family history registers can tedious. can easily done first second degree relatives, however, starts become difficult degrees relatives needs identified. R packages, Kinship2 FamAgg, allows users manipulate pedigrees perform certain actions calculations , however, best knowledge, allow one find relatives degree nn closer given individual. particular problem core LT-FH++, family members proband (often genotyped individual) need identified well family members’ mutual kinship coefficient covariance matrix. introduction function prepare_graph(), made possible automatically construct families list probands. , provide example function can used connection estimate_liability() function package. data simulated used -real-world analysis.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/articles/LTFHPlusGraphExample.html","id":"constructing-the-population-pedigree","dir":"Articles","previous_headings":"","what":"Constructing the population pedigree","title":"LT-FH++ Graph Example","text":"input inspired register information trio information provided danish CPR register. usually follows format column child’s ID (simply id), followed columns mother’s father’s ID (momcol dadcol). , provide illustrative example register information may look. names used representative relation proband named “pid”, “pgm” refering paternal grandmother, “mgf” refering maternal grandfather, “hs” prefix means half-sibling, new parents half-siblings appear “H” “W” suffix husband wife, cousins prefaced first two letters parents, etc.. Additionally, also need threshold information phenotype(s) interest. information baked graph object attributes, retrieved needed later estimate_liability() function. possible construct graph without information construct desired families.","code":"# example of register trio input family = tribble(   ~id, ~momcol, ~dadcol,   \"pid\", \"mom\", \"dad\",   \"sib\", \"mom\", \"dad\",   \"mhs\", \"mom\", \"dad2\",   \"phs\", \"mom2\", \"dad\",   \"mom\", \"mgm\", \"mgf\",   \"dad\", \"pgm\", \"pgf\",   \"dad2\", \"pgm2\", \"pgf2\",   \"paunt\", \"pgm\", \"pgf\",   \"pacousin\", \"paunt\", \"pauntH\",   \"hspaunt\", \"pgm\", \"newpgf\",   \"hspacousin\", \"hspaunt\", \"hspauntH\",   \"puncle\", \"pgm\", \"pgf\",   \"pucousin\", \"puncleW\", \"puncle\",   \"maunt\", \"mgm\", \"mgf\",   \"macousin\", \"maunt\", \"mauntH\",   \"hsmuncle\", \"newmgm\", \"mgf\",   \"hsmucousin\", \"hsmuncleW\", \"hsmuncle\" ) %>% print() ## # A tibble: 17 × 3 ##    id         momcol    dadcol   ##    <chr>      <chr>     <chr>    ##  1 pid        mom       dad      ##  2 sib        mom       dad      ##  3 mhs        mom       dad2     ##  4 phs        mom2      dad      ##  5 mom        mgm       mgf      ##  6 dad        pgm       pgf      ##  7 dad2       pgm2      pgf2     ##  8 paunt      pgm       pgf      ##  9 pacousin   paunt     pauntH   ## 10 hspaunt    pgm       newpgf   ## 11 hspacousin hspaunt   hspauntH ## 12 puncle     pgm       pgf      ## 13 pucousin   puncleW   puncle   ## 14 maunt      mgm       mgf      ## 15 macousin   maunt     mauntH   ## 16 hsmuncle   newmgm    mgf      ## 17 hsmucousin hsmuncleW hsmuncle # random thresholds to store as attributes thrs =  tibble(  id = family %>% select(1:3) %>% unlist() %>% unique(),  lower = sample(c(-Inf, 2), size = length(id), replace = TRUE),  upper = sample(c(2, Inf), size = length(id), replace = TRUE)) %>% print() ## # A tibble: 31 × 3 ##    id       lower upper ##    <chr>    <dbl> <dbl> ##  1 pid       -Inf     2 ##  2 sib       -Inf   Inf ##  3 mhs          2   Inf ##  4 phs       -Inf   Inf ##  5 mom       -Inf     2 ##  6 dad          2     2 ##  7 dad2      -Inf   Inf ##  8 paunt     -Inf     2 ##  9 pacousin  -Inf     2 ## 10 hspaunt      2   Inf ## # ℹ 21 more rows"},{"path":"EmilMiP.github.io/LTFHPlus/articles/LTFHPlusGraphExample.html","id":"constructing-the-graph","dir":"Articles","previous_headings":"","what":"Constructing the graph","title":"LT-FH++ Graph Example","text":"input, can construct graph population specified family attach information thrs: object graph directed graph connections specified family object attributes (attr) thrs. package igraph can used manipulation object graph. object graph contains single family example, however, just easily contain entirety danish CPR register, totalling 1010 million individuals. can create local graph (formally, neighborhood sub-graph) around proband, including individuals within nn steps said proband. nn steps correspond nn degree relatives, n=1n = 1 yields first degree relatives, n=2n = 2 yields second degree relatives, etc.. local graph, can construct kinship matrix covariance matrix required estimate_liability().","code":"graph = prepare_graph(.tbl = family,                        thresholds = thrs,                       fcol = \"dadcol\",                       mcol = \"momcol\",                       icol = \"id\") graph ## IGRAPH 12dc7be DN-- 31 44 --  ## + attr: name (v/c), lower (v/n), upper (v/n) ## + edges from 12dc7be (vertex names): ##  [1] dad     ->pid        mom     ->pid        dad     ->sib        ##  [4] mom     ->sib        dad2    ->mhs        mom     ->mhs        ##  [7] dad     ->phs        mom2    ->phs        mgf     ->mom        ## [10] mgm     ->mom        pgf     ->dad        pgm     ->dad        ## [13] pgf2    ->dad2       pgm2    ->dad2       pgf     ->paunt      ## [16] pgm     ->paunt      pauntH  ->pacousin   paunt   ->pacousin   ## [19] newpgf  ->hspaunt    pgm     ->hspaunt    hspauntH->hspacousin ## [22] hspaunt ->hspacousin pgf     ->puncle     pgm     ->puncle     ## + ... omitted several edges"},{"path":"EmilMiP.github.io/LTFHPlus/articles/LTFHPlusGraphExample.html","id":"extracting-local-graphs","dir":"Articles","previous_headings":"","what":"Extracting local graphs","title":"LT-FH++ Graph Example","text":"constructed graph entire Danish CPR register subset individuals genotyped, can create local graphs around genotyped individuals. , simply use every individual illustration: , family_graphs tibble id column called “pid” column called “fam_graph” list local graphs, centred individual “pid”.","code":"genotyped_ids = V(graph)$name  family_graphs = tibble(   pid = genotyped_ids,   fam_graph = make_ego_graph(graph, order = 2, nodes = pid) )"},{"path":"EmilMiP.github.io/LTFHPlus/articles/LTFHPlusGraphExample.html","id":"construct-kinship-matrix","dir":"Articles","previous_headings":"","what":"Construct kinship matrix","title":"LT-FH++ Graph Example","text":"can construct kinship matrix local graph following way: Note: individuals “hspaunt” present, since third degree relation.","code":"get_kinship(family_graphs$fam_graph[[1]], h2 = 1, index_id = family_graphs$pid[1]) ##         pid  sib  mhs  phs mom dad paunt puncle maunt  mgm  pgm  mgf  pgf pid_g ## pid    1.00 0.50 0.25 0.25 0.5 0.5  0.25   0.25  0.25 0.25 0.25 0.25 0.25  1.00 ## sib    0.50 1.00 0.25 0.25 0.5 0.5  0.25   0.25  0.25 0.25 0.25 0.25 0.25  0.50 ## mhs    0.25 0.25 1.00 0.00 0.5 0.0  0.00   0.00  0.25 0.25 0.00 0.25 0.00  0.25 ## phs    0.25 0.25 0.00 1.00 0.0 0.5  0.25   0.25  0.00 0.00 0.25 0.00 0.25  0.25 ## mom    0.50 0.50 0.50 0.00 1.0 0.0  0.00   0.00  0.50 0.50 0.00 0.50 0.00  0.50 ## dad    0.50 0.50 0.00 0.50 0.0 1.0  0.50   0.50  0.00 0.00 0.50 0.00 0.50  0.50 ## paunt  0.25 0.25 0.00 0.25 0.0 0.5  1.00   0.50  0.00 0.00 0.50 0.00 0.50  0.25 ## puncle 0.25 0.25 0.00 0.25 0.0 0.5  0.50   1.00  0.00 0.00 0.50 0.00 0.50  0.25 ## maunt  0.25 0.25 0.25 0.00 0.5 0.0  0.00   0.00  1.00 0.50 0.00 0.50 0.00  0.25 ## mgm    0.25 0.25 0.25 0.00 0.5 0.0  0.00   0.00  0.50 1.00 0.00 0.00 0.00  0.25 ## pgm    0.25 0.25 0.00 0.25 0.0 0.5  0.50   0.50  0.00 0.00 1.00 0.00 0.00  0.25 ## mgf    0.25 0.25 0.25 0.00 0.5 0.0  0.00   0.00  0.50 0.00 0.00 1.00 0.00  0.25 ## pgf    0.25 0.25 0.00 0.25 0.0 0.5  0.50   0.50  0.00 0.00 0.00 0.00 1.00  0.25 ## pid_g  1.00 0.50 0.25 0.25 0.5 0.5  0.25   0.25  0.25 0.25 0.25 0.25 0.25  1.00"},{"path":"EmilMiP.github.io/LTFHPlus/articles/LTFHPlusGraphExample.html","id":"calculating-genetic-liabilities","dir":"Articles","previous_headings":"","what":"Calculating genetic liabilities","title":"LT-FH++ Graph Example","text":"object family_graphs, constructed object required information format estimating genetic liabilities list probands. automatically extracted family present given proband degree 22 (can generalised integer nn), allows us construct kinship matrix. Next, attached lower upper threshold individual construction graph, follow indivdual whatever local graph part . Finally, need liability-scale heritability. simply use h2=0.5h^2 = 0.5 illustrative purposes. use estimate_liability() folling way:","code":"ltfhpp = estimate_liability(   family_graphs = family_graphs,   h2 = .5,   pid = \"pid\",   family_graphs_col = \"fam_graph\" ) %>% print() ## The number of workers is 1 ## # A tibble: 31 × 4 ##    fam_ID   pid      genetic_est genetic_se ##    <chr>    <chr>          <dbl>      <dbl> ##  1 pid      pid            0.939    0.00270 ##  2 sib      sib            1.01     0.00350 ##  3 mhs      mhs            1.44     0.00208 ##  4 phs      phs            0.566    0.00349 ##  5 mom      mom            1.07     0.00284 ##  6 dad      dad            1.21     0.00186 ##  7 dad2     dad2           1.07     0.00341 ##  8 paunt    paunt          0.773    0.00272 ##  9 pacousin pacousin       0.301    0.00366 ## 10 hspaunt  hspaunt        1.85     0.00193 ## # ℹ 21 more rows"},{"path":"EmilMiP.github.io/LTFHPlus/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Emil Michael Pedersen. Author, maintainer. Florian Privé. Author, thesis advisor. Bjarni Jóhann Vilhjálmsson. Thesis advisor. Esben Agerbo. Thesis advisor. Jette Steinbach. Author. Lucas Rasmussen. Contributor.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pedersen E, Privé F, Steinbach J (2025). LTFHPlus: Implementation LT-FH++. R package version 2.1.3, https://github.com/EmilMiP/LTFHPlus.","code":"@Manual{,   title = {LTFHPlus: Implementation of LT-FH++},   author = {Emil Michael Pedersen and Florian Privé and Jette Steinbach},   year = {2025},   note = {R package version 2.1.3},   url = {https://github.com/EmilMiP/LTFHPlus}, }"},{"path":"EmilMiP.github.io/LTFHPlus/index.html","id":"ltfhplus","dir":"","previous_headings":"","what":"Implementation of LT-FH++","title":"Implementation of LT-FH++","text":"LTFHPlus implements method LT-FH++, extension liability threshold model conditioned family history (LT-FH). accounts information right censoring, age onset, sex, cohort effects, allows flexible family structures. LT-FH++ can used estimate individual’s genetic component full liability, full liability accounting family history population prevalences. utilises efficient Gibbs sampler, implemented Rcpp highly scaleable. detailed description liability threshold model conditioned family history, age onset sex can found .","code":""},{"path":"EmilMiP.github.io/LTFHPlus/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Implementation of LT-FH++","text":"can install LTFHPlus : CRAN version:","code":"devtools::install_github(\"EmilMiP/LTFHPlus\") install.packages(\"LTFHPlus\")"},{"path":"EmilMiP.github.io/LTFHPlus/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Implementation of LT-FH++","text":"Documentation different functions, well examples use , can found pkgdown website.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/index.html","id":"changes-to-20","dir":"","previous_headings":"","what":"Changes to 2.0","title":"Implementation of LT-FH++","text":"important change version 2.0 flexible covariance matrix construction, corresponding update input. change covariance matrix allows users include family members far flexibility, allowing users completely exclude parents, use paternal/maternal half-siblings, grandparents, .","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/construct_covmat.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructing a covariance matrix for a variable number of phenotypes — construct_covmat","title":"Constructing a covariance matrix for a variable number of phenotypes — construct_covmat","text":"construct_covmat returns covariance matrix underlying target individual variable number family members variable number phenotypes. wrapper around construct_covmat_single construct_covmat_multi.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/construct_covmat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructing a covariance matrix for a variable number of phenotypes — construct_covmat","text":"","code":"construct_covmat(   fam_vec = c(\"m\", \"f\", \"s1\", \"mgm\", \"mgf\", \"pgm\", \"pgf\"),   n_fam = NULL,   add_ind = TRUE,   h2 = 0.5,   genetic_corrmat = NULL,   full_corrmat = NULL,   phen_names = NULL )"},{"path":"EmilMiP.github.io/LTFHPlus/reference/construct_covmat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructing a covariance matrix for a variable number of phenotypes — construct_covmat","text":"fam_vec vector strings holding different family members. family members must represented strings following list: m (Mother) f (Father) c[0-9]*.[0-9]* (Children) mgm (Maternal grandmother) mgf (Maternal grandfather) pgm (Paternal grandmother) pgf (Paternal grandfather) s[0-9]* (Full siblings) mhs[0-9]* (Half-siblings - maternal side) phs[0-9]* (Half-siblings - paternal side) mau[0-9]* (Aunts/Uncles - maternal side) pau[0-9]* (Aunts/Uncles - paternal side). Defaults c(\"m\",\"f\",\"s1\",\"mgm\",\"mgf\",\"pgm\",\"pgf\"). n_fam named vector holding desired number family members. See setNames. names must picked list mentioned . Defaults NULL. add_ind logical scalar indicating whether genetic component full liability well full liability underlying individual included covariance matrix. Defaults TRUE. h2 Either number representing heritability liability scale one single phenotype numeric vector representing liability-scale heritabilities positive number phenotypes. entries h2 must non-negative 1. genetic_corrmat Either NULL numeric matrix holding genetic correlations desired phenotypes. diagonal entries must equal one, -diagonal entries must -1 1. addition, matrix must symmetric. Defaults NULL. full_corrmat Either NULL  numeric matrix holding full correlations desired phenotypes. diagonal entries must equal one, -diagonal entries must -1 1. addition, matrix must symmetric. Defaults NULL. phen_names Either NULL character vector holding phenotype names. names used create row column names covariance matrix. specified, names default phenotype1, phenotype2, etc. Defaults NULL.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/construct_covmat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructing a covariance matrix for a variable number of phenotypes — construct_covmat","text":"either fam_vec n_fam used argument, required format, add_ind logical scalar h2 number satisfying $$0 \\leq h2 \\leq 1$$, function construct_covmat return named covariance matrix, row- column-number corresponds length fam_vec n_fam (+ 2 add_ind=TRUE). However, h2 numeric vector satisfying $$0 \\leq h2_i \\leq 1$$ $$\\\\{1,...,n_pheno\\}$$ genetic_corrmat full_corrmat two numeric symmetric matrices satisfying diagonal entries one -diagonal entries -1 1, construct_covmat return named covariance matrix, number rows columns corresponds number phenotypes times length fam_vec n_fam (+ 2 add_ind=TRUE). fam_vec n_fam equal c() NULL, function returns either \\(2 \\times 2\\) matrix holding correlation genetic component full liability full liability individual consideration, $$(2 \\times n_pheno) \\times (2\\times n_pheno)$$ matrix holding correlation genetic component full liability full liability underlying individual phenotypes. fam_vec n_fam specified, user asked decide two vectors use. Note returned object different attributes, fam_vec, n_fam, add_ind h2.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/construct_covmat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructing a covariance matrix for a variable number of phenotypes — construct_covmat","text":"function can used construct covariance matrix given number family members. h2 number, entry covariance matrix equals percentage shared DNA corresponding individuals times liability-scale heritability $$h^2$$. However, h2 numeric vector, genetic_corrmat full_corrmat two symmetric correlation matrices, entry equals either percentage shared DNA corresponding individuals times liability-scale heritability $$h^2$$ percentage shared DNA corresponding individuals times correlation corresponding phenotypes. family members can specified using one two possible formats.","code":""},{"path":[]},{"path":"EmilMiP.github.io/LTFHPlus/reference/construct_covmat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructing a covariance matrix for a variable number of phenotypes — construct_covmat","text":"","code":"construct_covmat() #>         g     o    m    f    s1   mgm   mgf   pgm   pgf #> g   0.500 0.500 0.25 0.25 0.250 0.125 0.125 0.125 0.125 #> o   0.500 1.000 0.25 0.25 0.250 0.125 0.125 0.125 0.125 #> m   0.250 0.250 1.00 0.00 0.250 0.250 0.250 0.000 0.000 #> f   0.250 0.250 0.00 1.00 0.250 0.000 0.000 0.250 0.250 #> s1  0.250 0.250 0.25 0.25 1.000 0.125 0.125 0.125 0.125 #> mgm 0.125 0.125 0.25 0.00 0.125 1.000 0.000 0.000 0.000 #> mgf 0.125 0.125 0.25 0.00 0.125 0.000 1.000 0.000 0.000 #> pgm 0.125 0.125 0.00 0.25 0.125 0.000 0.000 1.000 0.000 #> pgf 0.125 0.125 0.00 0.25 0.125 0.000 0.000 0.000 1.000 #> attr(,\"fam_vec\") #> [1] \"g\"   \"o\"   \"m\"   \"f\"   \"s1\"  \"mgm\" \"mgf\" \"pgm\" \"pgf\" #> attr(,\"n_fam\") #>  #>   f   g   m mgf mgm   o pgf pgm   s  #>   1   1   1   1   1   1   1   1   1  #> attr(,\"add_ind\") #> [1] TRUE #> attr(,\"h2\") #> [1] 0.5 construct_covmat(fam_vec = c(\"m\",\"mgm\",\"mgf\",\"mhs1\",\"mhs2\",\"mau1\"),                   n_fam = NULL,                   add_ind = TRUE,                   h2 = 0.5) #>          g     o    m   mgm   mgf  mhs1  mhs2  mau1 #> g    0.500 0.500 0.25 0.125 0.125 0.125 0.125 0.125 #> o    0.500 1.000 0.25 0.125 0.125 0.125 0.125 0.125 #> m    0.250 0.250 1.00 0.250 0.250 0.250 0.250 0.250 #> mgm  0.125 0.125 0.25 1.000 0.000 0.125 0.125 0.250 #> mgf  0.125 0.125 0.25 0.000 1.000 0.125 0.125 0.250 #> mhs1 0.125 0.125 0.25 0.125 0.125 1.000 0.250 0.125 #> mhs2 0.125 0.125 0.25 0.125 0.125 0.250 1.000 0.125 #> mau1 0.125 0.125 0.25 0.250 0.250 0.125 0.125 1.000 #> attr(,\"fam_vec\") #> [1] \"g\"    \"o\"    \"m\"    \"mgm\"  \"mgf\"  \"mhs1\" \"mhs2\" \"mau1\" #> attr(,\"n_fam\") #>  #>   g   m mau mgf mgm mhs   o  #>   1   1   1   1   1   2   1  #> attr(,\"add_ind\") #> [1] TRUE #> attr(,\"h2\") #> [1] 0.5 construct_covmat(fam_vec = NULL,                   n_fam = stats::setNames(c(1,1,1,2,2), c(\"m\",\"mgm\",\"mgf\",\"s\",\"mhs\")),                   add_ind = FALSE,                  h2 = 0.3) #>         m   mgm   mgf    s1    s2  mhs1  mhs2 #> m    1.00 0.150 0.150 0.150 0.150 0.150 0.150 #> mgm  0.15 1.000 0.000 0.075 0.075 0.075 0.075 #> mgf  0.15 0.000 1.000 0.075 0.075 0.075 0.075 #> s1   0.15 0.075 0.075 1.000 0.150 0.075 0.075 #> s2   0.15 0.075 0.075 0.150 1.000 0.075 0.075 #> mhs1 0.15 0.075 0.075 0.075 0.075 1.000 0.150 #> mhs2 0.15 0.075 0.075 0.075 0.075 0.150 1.000 #> attr(,\"fam_vec\") #> [1] \"m\"    \"mgm\"  \"mgf\"  \"s1\"   \"s2\"   \"mhs1\" \"mhs2\" #> attr(,\"n_fam\") #>   m mgm mgf   s mhs  #>   1   1   1   2   2  #> attr(,\"add_ind\") #> [1] FALSE #> attr(,\"h2\") #> [1] 0.3 construct_covmat(h2 = c(0.5,0.5), genetic_corrmat = matrix(c(1,0.4,0.4,1), nrow = 2),                  full_corrmat = matrix(c(1,0.6,0.6,1), nrow = 2)) #>                g_phenotype1 o_phenotype1 m_phenotype1 f_phenotype1 #> g_phenotype1          0.500        0.500         0.25         0.25 #> o_phenotype1          0.500        1.000         0.25         0.25 #> m_phenotype1          0.250        0.250         1.00         0.00 #> f_phenotype1          0.250        0.250         0.00         1.00 #> s1_phenotype1         0.250        0.250         0.25         0.25 #> mgm_phenotype1        0.125        0.125         0.25         0.00 #> mgf_phenotype1        0.125        0.125         0.25         0.00 #> pgm_phenotype1        0.125        0.125         0.00         0.25 #> pgf_phenotype1        0.125        0.125         0.00         0.25 #> g_phenotype2          0.200        0.200         0.10         0.10 #> o_phenotype2          0.200        0.600         0.10         0.10 #> m_phenotype2          0.100        0.100         0.60         0.00 #> f_phenotype2          0.100        0.100         0.00         0.60 #> s1_phenotype2         0.100        0.100         0.10         0.10 #> mgm_phenotype2        0.050        0.050         0.10         0.00 #> mgf_phenotype2        0.050        0.050         0.10         0.00 #> pgm_phenotype2        0.050        0.050         0.00         0.10 #> pgf_phenotype2        0.050        0.050         0.00         0.10 #>                s1_phenotype1 mgm_phenotype1 mgf_phenotype1 pgm_phenotype1 #> g_phenotype1           0.250          0.125          0.125          0.125 #> o_phenotype1           0.250          0.125          0.125          0.125 #> m_phenotype1           0.250          0.250          0.250          0.000 #> f_phenotype1           0.250          0.000          0.000          0.250 #> s1_phenotype1          1.000          0.125          0.125          0.125 #> mgm_phenotype1         0.125          1.000          0.000          0.000 #> mgf_phenotype1         0.125          0.000          1.000          0.000 #> pgm_phenotype1         0.125          0.000          0.000          1.000 #> pgf_phenotype1         0.125          0.000          0.000          0.000 #> g_phenotype2           0.100          0.050          0.050          0.050 #> o_phenotype2           0.100          0.050          0.050          0.050 #> m_phenotype2           0.100          0.100          0.100          0.000 #> f_phenotype2           0.100          0.000          0.000          0.100 #> s1_phenotype2          0.600          0.050          0.050          0.050 #> mgm_phenotype2         0.050          0.600          0.000          0.000 #> mgf_phenotype2         0.050          0.000          0.600          0.000 #> pgm_phenotype2         0.050          0.000          0.000          0.600 #> pgf_phenotype2         0.050          0.000          0.000          0.000 #>                pgf_phenotype1 g_phenotype2 o_phenotype2 m_phenotype2 #> g_phenotype1            0.125        0.200        0.200         0.10 #> o_phenotype1            0.125        0.200        0.600         0.10 #> m_phenotype1            0.000        0.100        0.100         0.60 #> f_phenotype1            0.250        0.100        0.100         0.00 #> s1_phenotype1           0.125        0.100        0.100         0.10 #> mgm_phenotype1          0.000        0.050        0.050         0.10 #> mgf_phenotype1          0.000        0.050        0.050         0.10 #> pgm_phenotype1          0.000        0.050        0.050         0.00 #> pgf_phenotype1          1.000        0.050        0.050         0.00 #> g_phenotype2            0.050        0.500        0.500         0.25 #> o_phenotype2            0.050        0.500        1.000         0.25 #> m_phenotype2            0.000        0.250        0.250         1.00 #> f_phenotype2            0.100        0.250        0.250         0.00 #> s1_phenotype2           0.050        0.250        0.250         0.25 #> mgm_phenotype2          0.000        0.125        0.125         0.25 #> mgf_phenotype2          0.000        0.125        0.125         0.25 #> pgm_phenotype2          0.000        0.125        0.125         0.00 #> pgf_phenotype2          0.600        0.125        0.125         0.00 #>                f_phenotype2 s1_phenotype2 mgm_phenotype2 mgf_phenotype2 #> g_phenotype1           0.10         0.100          0.050          0.050 #> o_phenotype1           0.10         0.100          0.050          0.050 #> m_phenotype1           0.00         0.100          0.100          0.100 #> f_phenotype1           0.60         0.100          0.000          0.000 #> s1_phenotype1          0.10         0.600          0.050          0.050 #> mgm_phenotype1         0.00         0.050          0.600          0.000 #> mgf_phenotype1         0.00         0.050          0.000          0.600 #> pgm_phenotype1         0.10         0.050          0.000          0.000 #> pgf_phenotype1         0.10         0.050          0.000          0.000 #> g_phenotype2           0.25         0.250          0.125          0.125 #> o_phenotype2           0.25         0.250          0.125          0.125 #> m_phenotype2           0.00         0.250          0.250          0.250 #> f_phenotype2           1.00         0.250          0.000          0.000 #> s1_phenotype2          0.25         1.000          0.125          0.125 #> mgm_phenotype2         0.00         0.125          1.000          0.000 #> mgf_phenotype2         0.00         0.125          0.000          1.000 #> pgm_phenotype2         0.25         0.125          0.000          0.000 #> pgf_phenotype2         0.25         0.125          0.000          0.000 #>                pgm_phenotype2 pgf_phenotype2 #> g_phenotype1            0.050          0.050 #> o_phenotype1            0.050          0.050 #> m_phenotype1            0.000          0.000 #> f_phenotype1            0.100          0.100 #> s1_phenotype1           0.050          0.050 #> mgm_phenotype1          0.000          0.000 #> mgf_phenotype1          0.000          0.000 #> pgm_phenotype1          0.600          0.000 #> pgf_phenotype1          0.000          0.600 #> g_phenotype2            0.125          0.125 #> o_phenotype2            0.125          0.125 #> m_phenotype2            0.000          0.000 #> f_phenotype2            0.250          0.250 #> s1_phenotype2           0.125          0.125 #> mgm_phenotype2          0.000          0.000 #> mgf_phenotype2          0.000          0.000 #> pgm_phenotype2          1.000          0.000 #> pgf_phenotype2          0.000          1.000 #> attr(,\"fam_vec\") #> [1] \"g\"   \"o\"   \"m\"   \"f\"   \"s1\"  \"mgm\" \"mgf\" \"pgm\" \"pgf\" #> attr(,\"n_fam\") #>  #>   f   g   m mgf mgm   o pgf pgm   s  #>   1   1   1   1   1   1   1   1   1  #> attr(,\"add_ind\") #> [1] TRUE #> attr(,\"h2\") #> [1] 0.5 0.5 #> attr(,\"genetic_corrmat\") #>      [,1] [,2] #> [1,]  1.0  0.4 #> [2,]  0.4  1.0 #> attr(,\"full_corrmat\") #>      [,1] [,2] #> [1,]  1.0  0.6 #> [2,]  0.6  1.0 #> attr(,\"phenotype_names\") #> [1] \"phenotype1\" \"phenotype2\""},{"path":"EmilMiP.github.io/LTFHPlus/reference/construct_covmat_multi.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructing a covariance matrix for multiple phenotypes — construct_covmat_multi","title":"Constructing a covariance matrix for multiple phenotypes — construct_covmat_multi","text":"construct_covmat_multi returns covariance matrix underlying target individual variable number family members multiple phenotypes.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/construct_covmat_multi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructing a covariance matrix for multiple phenotypes — construct_covmat_multi","text":"","code":"construct_covmat_multi(   fam_vec = c(\"m\", \"f\", \"s1\", \"mgm\", \"mgf\", \"pgm\", \"pgf\"),   n_fam = NULL,   add_ind = TRUE,   genetic_corrmat,   full_corrmat,   h2_vec,   phen_names = NULL )"},{"path":"EmilMiP.github.io/LTFHPlus/reference/construct_covmat_multi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructing a covariance matrix for multiple phenotypes — construct_covmat_multi","text":"fam_vec vector strings holding different family members. family members must represented strings following list: m (Mother) f (Father) c[0-9]*.[0-9]* (Children) mgm (Maternal grandmother) mgf (Maternal grandfather) pgm (Paternal grandmother) pgf (Paternal grandfather) s[0-9]* (Full siblings) mhs[0-9]* (Half-siblings - maternal side) phs[0-9]* (Half-siblings - paternal side) mau[0-9]* (Aunts/Uncles - maternal side) pau[0-9]* (Aunts/Uncles - paternal side). Defaults c(\"m\",\"f\",\"s1\",\"mgm\",\"mgf\",\"pgm\",\"pgf\"). n_fam named vector holding desired number family members. See setNames. names must picked list mentioned . Defaults NULL. add_ind logical scalar indicating whether genetic component full liability well full liability underlying individual included covariance matrix. Defaults TRUE. genetic_corrmat numeric matrix holding genetic correlations desired phenotypes. diagonal entries must equal one, -diagonal entries must -1 1. addition, matrix must symmetric. full_corrmat numeric matrix holding full correlations desired phenotypes. diagonal entries must equal one, -diagonal entries must -1 1. addition, matrix must symmetric. h2_vec numeric vector representing liability-scale heritabilities phenotypes. entries h2_vec must non-negative 1. phen_names character vector holding phenotype names. names used create row column names covariance matrix. specified, names default phenotype1, phenotype2, etc. Defaults NULL.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/construct_covmat_multi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructing a covariance matrix for multiple phenotypes — construct_covmat_multi","text":"either fam_vec n_fam used argument required format, genetic_corrmat full_corrmat two numeric symmetric matrices satisfying diagonal entries one -diagonal entries -1 1, h2_vec numeric vector satisfying \\(0 \\leq h2_i \\leq 1\\) \\(\\\\{1,...,n_pheno\\}\\), output named covariance matrix. number rows columns corresponds number phenotypes times length fam_vec n_fam (+ 2 add_ind=TRUE). fam_vec n_fam equal c() NULL, function returns \\((2 \\times n_pheno) \\times (2\\times n_pheno)\\) matrix holding correlation genetic component full liability full liability underlying individual phenotypes. fam_vec n_fam specified, user asked decide two vectors use. Note returned object number different attributes,namely fam_vec, n_fam, add_ind, genetic_corrmat, full_corrmat, h2 phenotype_names.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/construct_covmat_multi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructing a covariance matrix for multiple phenotypes — construct_covmat_multi","text":"function can used construct covariance matrix given number family members. entry covariance matrix equals either percentage shared DNA corresponding individuals times liability-scale heritability \\(h^2\\) percentage shared DNA corresponding individuals times correlation corresponding phenotypes. , phenotype, covariance combinations genetic component full liability full liability given $$\\text{Cov}\\left( l_g, l_g \\right) = h^2,$$ $$\\text{Cov}\\left( l_g, l_o \\right) = h^2,$$ $$\\text{Cov}\\left( l_o, l_g \\right) = h^2$$ $$\\text{Cov}\\left( l_o, l_o \\right) = 1.$$ two different phenotypes, covariance given $$\\text{Cov}\\left( l_g^1, l_g^2 \\right) = \\rho_g^{1,2},$$ $$\\text{Cov}\\left( l_g^1, l_o^2 \\right) = \\rho_g^{1,2},$$ $$\\text{Cov}\\left( l_o^1, l_g^2 \\right) = \\rho_g^{1,2}$$ $$\\text{Cov}\\left( l_o^1, l_o^2 \\right) = \\rho_g^{1,2} + \\rho_e^{1,2},$$ \\(l_g^\\) \\(l_o^\\) genetic component full liability full liability phenotype \\(\\), respectively, \\(\\rho_g^{,j}\\) genetic correlation phenotype \\(\\) \\(j\\) \\(\\rho_e^{1,2}\\) environmental correlation phenotype \\(\\) \\(j\\). family members can specified using one two possible formats.","code":""},{"path":[]},{"path":"EmilMiP.github.io/LTFHPlus/reference/construct_covmat_multi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructing a covariance matrix for multiple phenotypes — construct_covmat_multi","text":"","code":"construct_covmat_multi(fam_vec = NULL,                         genetic_corrmat = matrix(c(1, 0.5, 0.5, 1), nrow = 2),                        full_corrmat = matrix(c(1, 0.55, 0.55, 1), nrow = 2),                        h2_vec = c(0.37,0.44),                        phen_names = c(\"p1\",\"p2\")) #> Warning:  #>  Neither fam_vec nor n_fam is specified... #>      g_p1 o_p1 g_p2 o_p2 #> g_p1 0.37 0.37 0.50 0.50 #> o_p1 0.37 1.00 0.50 0.55 #> g_p2 0.50 0.50 0.44 0.44 #> o_p2 0.50 0.55 0.44 1.00 #> attr(,\"fam_vec\") #> [1] \"g\" \"o\" #> attr(,\"n_fam\") #> g o  #> 1 1  #> attr(,\"add_ind\") #> [1] TRUE #> attr(,\"h2\") #> [1] 0.37 0.44 #> attr(,\"genetic_corrmat\") #>      [,1] [,2] #> [1,]  1.0  0.5 #> [2,]  0.5  1.0 #> attr(,\"full_corrmat\") #>      [,1] [,2] #> [1,] 1.00 0.55 #> [2,] 0.55 1.00 #> attr(,\"phenotype_names\") #> [1] \"p1\" \"p2\" construct_covmat_multi(fam_vec = c(\"m\",\"mgm\",\"mgf\",\"mhs1\",\"mhs2\",\"mau1\"),                         n_fam = NULL,                         add_ind = TRUE,                        genetic_corrmat = diag(3),                        full_corrmat = diag(3),                        h2_vec = c(0.8, 0.65)) #>                 g_phenotype1 o_phenotype1 m_phenotype1 mgm_phenotype1 #> g_phenotype1             0.8          0.8          0.4            0.2 #> o_phenotype1             0.8          1.0          0.4            0.2 #> m_phenotype1             0.4          0.4          1.0            0.4 #> mgm_phenotype1           0.2          0.2          0.4            1.0 #> mgf_phenotype1           0.2          0.2          0.4            0.0 #> mhs1_phenotype1          0.2          0.2          0.4            0.2 #> mhs2_phenotype1          0.2          0.2          0.4            0.2 #> mau1_phenotype1          0.2          0.2          0.4            0.4 #> g_phenotype2             0.0          0.0          0.0            0.0 #> o_phenotype2             0.0          0.0          0.0            0.0 #> m_phenotype2             0.0          0.0          0.0            0.0 #> mgm_phenotype2           0.0          0.0          0.0            0.0 #> mgf_phenotype2           0.0          0.0          0.0            0.0 #> mhs1_phenotype2          0.0          0.0          0.0            0.0 #> mhs2_phenotype2          0.0          0.0          0.0            0.0 #> mau1_phenotype2          0.0          0.0          0.0            0.0 #>                 mgf_phenotype1 mhs1_phenotype1 mhs2_phenotype1 mau1_phenotype1 #> g_phenotype1               0.2             0.2             0.2             0.2 #> o_phenotype1               0.2             0.2             0.2             0.2 #> m_phenotype1               0.4             0.4             0.4             0.4 #> mgm_phenotype1             0.0             0.2             0.2             0.4 #> mgf_phenotype1             1.0             0.2             0.2             0.4 #> mhs1_phenotype1            0.2             1.0             0.4             0.2 #> mhs2_phenotype1            0.2             0.4             1.0             0.2 #> mau1_phenotype1            0.4             0.2             0.2             1.0 #> g_phenotype2               0.0             0.0             0.0             0.0 #> o_phenotype2               0.0             0.0             0.0             0.0 #> m_phenotype2               0.0             0.0             0.0             0.0 #> mgm_phenotype2             0.0             0.0             0.0             0.0 #> mgf_phenotype2             0.0             0.0             0.0             0.0 #> mhs1_phenotype2            0.0             0.0             0.0             0.0 #> mhs2_phenotype2            0.0             0.0             0.0             0.0 #> mau1_phenotype2            0.0             0.0             0.0             0.0 #>                 g_phenotype2 o_phenotype2 m_phenotype2 mgm_phenotype2 #> g_phenotype1          0.0000       0.0000        0.000         0.0000 #> o_phenotype1          0.0000       0.0000        0.000         0.0000 #> m_phenotype1          0.0000       0.0000        0.000         0.0000 #> mgm_phenotype1        0.0000       0.0000        0.000         0.0000 #> mgf_phenotype1        0.0000       0.0000        0.000         0.0000 #> mhs1_phenotype1       0.0000       0.0000        0.000         0.0000 #> mhs2_phenotype1       0.0000       0.0000        0.000         0.0000 #> mau1_phenotype1       0.0000       0.0000        0.000         0.0000 #> g_phenotype2          0.6500       0.6500        0.325         0.1625 #> o_phenotype2          0.6500       1.0000        0.325         0.1625 #> m_phenotype2          0.3250       0.3250        1.000         0.3250 #> mgm_phenotype2        0.1625       0.1625        0.325         1.0000 #> mgf_phenotype2        0.1625       0.1625        0.325         0.0000 #> mhs1_phenotype2       0.1625       0.1625        0.325         0.1625 #> mhs2_phenotype2       0.1625       0.1625        0.325         0.1625 #> mau1_phenotype2       0.1625       0.1625        0.325         0.3250 #>                 mgf_phenotype2 mhs1_phenotype2 mhs2_phenotype2 mau1_phenotype2 #> g_phenotype1            0.0000          0.0000          0.0000          0.0000 #> o_phenotype1            0.0000          0.0000          0.0000          0.0000 #> m_phenotype1            0.0000          0.0000          0.0000          0.0000 #> mgm_phenotype1          0.0000          0.0000          0.0000          0.0000 #> mgf_phenotype1          0.0000          0.0000          0.0000          0.0000 #> mhs1_phenotype1         0.0000          0.0000          0.0000          0.0000 #> mhs2_phenotype1         0.0000          0.0000          0.0000          0.0000 #> mau1_phenotype1         0.0000          0.0000          0.0000          0.0000 #> g_phenotype2            0.1625          0.1625          0.1625          0.1625 #> o_phenotype2            0.1625          0.1625          0.1625          0.1625 #> m_phenotype2            0.3250          0.3250          0.3250          0.3250 #> mgm_phenotype2          0.0000          0.1625          0.1625          0.3250 #> mgf_phenotype2          1.0000          0.1625          0.1625          0.3250 #> mhs1_phenotype2         0.1625          1.0000          0.3250          0.1625 #> mhs2_phenotype2         0.1625          0.3250          1.0000          0.1625 #> mau1_phenotype2         0.3250          0.1625          0.1625          1.0000 #> attr(,\"fam_vec\") #> [1] \"g\"    \"o\"    \"m\"    \"mgm\"  \"mgf\"  \"mhs1\" \"mhs2\" \"mau1\" #> attr(,\"n_fam\") #>  #>   g   m mau mgf mgm mhs   o  #>   1   1   1   1   1   2   1  #> attr(,\"add_ind\") #> [1] TRUE #> attr(,\"h2\") #> [1] 0.80 0.65 #> attr(,\"genetic_corrmat\") #>      [,1] [,2] [,3] #> [1,]    1    0    0 #> [2,]    0    1    0 #> [3,]    0    0    1 #> attr(,\"full_corrmat\") #>      [,1] [,2] [,3] #> [1,]    1    0    0 #> [2,]    0    1    0 #> [3,]    0    0    1 #> attr(,\"phenotype_names\") #> [1] \"phenotype1\" \"phenotype2\" construct_covmat_multi(fam_vec = NULL,                         n_fam = stats::setNames(c(1,1,1,2,2), c(\"m\",\"mgm\",\"mgf\",\"s\",\"mhs\")),                         add_ind = FALSE,                        genetic_corrmat = diag(2),                        full_corrmat = diag(2),                        h2_vec = c(0.75,0.85)) #>                 m_phenotype1 mgm_phenotype1 mgf_phenotype1 s1_phenotype1 #> m_phenotype1           1.000         0.3750         0.3750        0.3750 #> mgm_phenotype1         0.375         1.0000         0.0000        0.1875 #> mgf_phenotype1         0.375         0.0000         1.0000        0.1875 #> s1_phenotype1          0.375         0.1875         0.1875        1.0000 #> s2_phenotype1          0.375         0.1875         0.1875        0.3750 #> mhs1_phenotype1        0.375         0.1875         0.1875        0.1875 #> mhs2_phenotype1        0.375         0.1875         0.1875        0.1875 #> m_phenotype2           0.000         0.0000         0.0000        0.0000 #> mgm_phenotype2         0.000         0.0000         0.0000        0.0000 #> mgf_phenotype2         0.000         0.0000         0.0000        0.0000 #> s1_phenotype2          0.000         0.0000         0.0000        0.0000 #> s2_phenotype2          0.000         0.0000         0.0000        0.0000 #> mhs1_phenotype2        0.000         0.0000         0.0000        0.0000 #> mhs2_phenotype2        0.000         0.0000         0.0000        0.0000 #>                 s2_phenotype1 mhs1_phenotype1 mhs2_phenotype1 m_phenotype2 #> m_phenotype1           0.3750          0.3750          0.3750        0.000 #> mgm_phenotype1         0.1875          0.1875          0.1875        0.000 #> mgf_phenotype1         0.1875          0.1875          0.1875        0.000 #> s1_phenotype1          0.3750          0.1875          0.1875        0.000 #> s2_phenotype1          1.0000          0.1875          0.1875        0.000 #> mhs1_phenotype1        0.1875          1.0000          0.3750        0.000 #> mhs2_phenotype1        0.1875          0.3750          1.0000        0.000 #> m_phenotype2           0.0000          0.0000          0.0000        1.000 #> mgm_phenotype2         0.0000          0.0000          0.0000        0.425 #> mgf_phenotype2         0.0000          0.0000          0.0000        0.425 #> s1_phenotype2          0.0000          0.0000          0.0000        0.425 #> s2_phenotype2          0.0000          0.0000          0.0000        0.425 #> mhs1_phenotype2        0.0000          0.0000          0.0000        0.425 #> mhs2_phenotype2        0.0000          0.0000          0.0000        0.425 #>                 mgm_phenotype2 mgf_phenotype2 s1_phenotype2 s2_phenotype2 #> m_phenotype1            0.0000         0.0000        0.0000        0.0000 #> mgm_phenotype1          0.0000         0.0000        0.0000        0.0000 #> mgf_phenotype1          0.0000         0.0000        0.0000        0.0000 #> s1_phenotype1           0.0000         0.0000        0.0000        0.0000 #> s2_phenotype1           0.0000         0.0000        0.0000        0.0000 #> mhs1_phenotype1         0.0000         0.0000        0.0000        0.0000 #> mhs2_phenotype1         0.0000         0.0000        0.0000        0.0000 #> m_phenotype2            0.4250         0.4250        0.4250        0.4250 #> mgm_phenotype2          1.0000         0.0000        0.2125        0.2125 #> mgf_phenotype2          0.0000         1.0000        0.2125        0.2125 #> s1_phenotype2           0.2125         0.2125        1.0000        0.4250 #> s2_phenotype2           0.2125         0.2125        0.4250        1.0000 #> mhs1_phenotype2         0.2125         0.2125        0.2125        0.2125 #> mhs2_phenotype2         0.2125         0.2125        0.2125        0.2125 #>                 mhs1_phenotype2 mhs2_phenotype2 #> m_phenotype1             0.0000          0.0000 #> mgm_phenotype1           0.0000          0.0000 #> mgf_phenotype1           0.0000          0.0000 #> s1_phenotype1            0.0000          0.0000 #> s2_phenotype1            0.0000          0.0000 #> mhs1_phenotype1          0.0000          0.0000 #> mhs2_phenotype1          0.0000          0.0000 #> m_phenotype2             0.4250          0.4250 #> mgm_phenotype2           0.2125          0.2125 #> mgf_phenotype2           0.2125          0.2125 #> s1_phenotype2            0.2125          0.2125 #> s2_phenotype2            0.2125          0.2125 #> mhs1_phenotype2          1.0000          0.4250 #> mhs2_phenotype2          0.4250          1.0000 #> attr(,\"fam_vec\") #> [1] \"m\"    \"mgm\"  \"mgf\"  \"s1\"   \"s2\"   \"mhs1\" \"mhs2\" #> attr(,\"n_fam\") #>   m mgm mgf   s mhs  #>   1   1   1   2   2  #> attr(,\"add_ind\") #> [1] FALSE #> attr(,\"h2\") #> [1] 0.75 0.85 #> attr(,\"genetic_corrmat\") #>      [,1] [,2] #> [1,]    1    0 #> [2,]    0    1 #> attr(,\"full_corrmat\") #>      [,1] [,2] #> [1,]    1    0 #> [2,]    0    1 #> attr(,\"phenotype_names\") #> [1] \"phenotype1\" \"phenotype2\""},{"path":"EmilMiP.github.io/LTFHPlus/reference/construct_covmat_single.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructing a covariance matrix for a single phenotype — construct_covmat_single","title":"Constructing a covariance matrix for a single phenotype — construct_covmat_single","text":"construct_covmatc_single returns covariance matrix underlying target individual variable number family members","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/construct_covmat_single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructing a covariance matrix for a single phenotype — construct_covmat_single","text":"","code":"construct_covmat_single(   fam_vec = c(\"m\", \"f\", \"s1\", \"mgm\", \"mgf\", \"pgm\", \"pgf\"),   n_fam = NULL,   add_ind = TRUE,   h2 = 0.5 )"},{"path":"EmilMiP.github.io/LTFHPlus/reference/construct_covmat_single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructing a covariance matrix for a single phenotype — construct_covmat_single","text":"fam_vec vector strings holding different family members. family members must represented strings following list: m (Mother) f (Father) c[0-9]*.[0-9]* (Children) mgm (Maternal grandmother) mgf (Maternal grandfather) pgm (Paternal grandmother) pgf (Paternal grandfather) s[0-9]* (Full siblings) mhs[0-9]* (Half-siblings - maternal side) phs[0-9]* (Half-siblings - paternal side) mau[0-9]* (Aunts/Uncles - maternal side) pau[0-9]* (Aunts/Uncles - paternal side). n_fam named vector holding desired number family members. See setNames. names must picked list mentioned . Defaults NULL. add_ind logical scalar indicating whether genetic component full liability well full liability underlying individual included covariance matrix. Defaults TRUE. h2 number representing squared heritability liability scale single phenotype. Must non-negative 1. Defaults 0.5.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/construct_covmat_single.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructing a covariance matrix for a single phenotype — construct_covmat_single","text":"either fam_vec n_fam used argument, required format h2 number satisfying \\(0 \\leq h2 \\leq 1\\), output named covariance matrix. number rows columns corresponds length fam_vec n_fam (+ 2 add_ind=TRUE). fam_vec = c()/NULL n_fam = c()/NULL, function returns \\(2 \\times 2\\) matrix holding correlation genetic component full liability full liability individual. fam_vec n_fam given, user asked decide two vectors use. Note returned object different attributes, fam_vec, n_fam, add_ind h2.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/construct_covmat_single.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructing a covariance matrix for a single phenotype — construct_covmat_single","text":"function can used construct covariance matrix given number family members. entry covariance matrix equals percentage shared DNA corresponding individuals times liability-scale heritability \\(h^2\\). family members can specified using one two possible formats.","code":""},{"path":[]},{"path":"EmilMiP.github.io/LTFHPlus/reference/construct_covmat_single.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructing a covariance matrix for a single phenotype — construct_covmat_single","text":"","code":"construct_covmat_single() #>         g     o    m    f    s1   mgm   mgf   pgm   pgf #> g   0.500 0.500 0.25 0.25 0.250 0.125 0.125 0.125 0.125 #> o   0.500 1.000 0.25 0.25 0.250 0.125 0.125 0.125 0.125 #> m   0.250 0.250 1.00 0.00 0.250 0.250 0.250 0.000 0.000 #> f   0.250 0.250 0.00 1.00 0.250 0.000 0.000 0.250 0.250 #> s1  0.250 0.250 0.25 0.25 1.000 0.125 0.125 0.125 0.125 #> mgm 0.125 0.125 0.25 0.00 0.125 1.000 0.000 0.000 0.000 #> mgf 0.125 0.125 0.25 0.00 0.125 0.000 1.000 0.000 0.000 #> pgm 0.125 0.125 0.00 0.25 0.125 0.000 0.000 1.000 0.000 #> pgf 0.125 0.125 0.00 0.25 0.125 0.000 0.000 0.000 1.000 #> attr(,\"fam_vec\") #> [1] \"g\"   \"o\"   \"m\"   \"f\"   \"s1\"  \"mgm\" \"mgf\" \"pgm\" \"pgf\" #> attr(,\"n_fam\") #>  #>   f   g   m mgf mgm   o pgf pgm   s  #>   1   1   1   1   1   1   1   1   1  #> attr(,\"add_ind\") #> [1] TRUE #> attr(,\"h2\") #> [1] 0.5 construct_covmat_single(fam_vec = c(\"m\",\"mgm\",\"mgf\",\"mhs1\",\"mhs2\",\"mau1\"),  n_fam = NULL, add_ind = TRUE, h2 = 0.5) #>          g     o    m   mgm   mgf  mhs1  mhs2  mau1 #> g    0.500 0.500 0.25 0.125 0.125 0.125 0.125 0.125 #> o    0.500 1.000 0.25 0.125 0.125 0.125 0.125 0.125 #> m    0.250 0.250 1.00 0.250 0.250 0.250 0.250 0.250 #> mgm  0.125 0.125 0.25 1.000 0.000 0.125 0.125 0.250 #> mgf  0.125 0.125 0.25 0.000 1.000 0.125 0.125 0.250 #> mhs1 0.125 0.125 0.25 0.125 0.125 1.000 0.250 0.125 #> mhs2 0.125 0.125 0.25 0.125 0.125 0.250 1.000 0.125 #> mau1 0.125 0.125 0.25 0.250 0.250 0.125 0.125 1.000 #> attr(,\"fam_vec\") #> [1] \"g\"    \"o\"    \"m\"    \"mgm\"  \"mgf\"  \"mhs1\" \"mhs2\" \"mau1\" #> attr(,\"n_fam\") #>  #>   g   m mau mgf mgm mhs   o  #>   1   1   1   1   1   2   1  #> attr(,\"add_ind\") #> [1] TRUE #> attr(,\"h2\") #> [1] 0.5 construct_covmat_single(fam_vec = NULL, n_fam = stats::setNames(c(1,1,1,2,2),  c(\"m\",\"mgm\",\"mgf\",\"s\",\"mhs\")), add_ind = FALSE, h2 = 0.3) #>         m   mgm   mgf    s1    s2  mhs1  mhs2 #> m    1.00 0.150 0.150 0.150 0.150 0.150 0.150 #> mgm  0.15 1.000 0.000 0.075 0.075 0.075 0.075 #> mgf  0.15 0.000 1.000 0.075 0.075 0.075 0.075 #> s1   0.15 0.075 0.075 1.000 0.150 0.075 0.075 #> s2   0.15 0.075 0.075 0.150 1.000 0.075 0.075 #> mhs1 0.15 0.075 0.075 0.075 0.075 1.000 0.150 #> mhs2 0.15 0.075 0.075 0.075 0.075 0.150 1.000 #> attr(,\"fam_vec\") #> [1] \"m\"    \"mgm\"  \"mgf\"  \"s1\"   \"s2\"   \"mhs1\" \"mhs2\" #> attr(,\"n_fam\") #>   m mgm mgf   s mhs  #>   1   1   1   2   2  #> attr(,\"add_ind\") #> [1] FALSE #> attr(,\"h2\") #> [1] 0.3"},{"path":"EmilMiP.github.io/LTFHPlus/reference/convert_age_to_cir.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert age to cumulative incidence rate — convert_age_to_cir","title":"Convert age to cumulative incidence rate — convert_age_to_cir","text":"convert_age_to_cir computes cumulative incidence rate person's age.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/convert_age_to_cir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert age to cumulative incidence rate — convert_age_to_cir","text":"","code":"convert_age_to_cir(age, pop_prev = 0.1, mid_point = 60, slope = 1/8)"},{"path":"EmilMiP.github.io/LTFHPlus/reference/convert_age_to_cir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert age to cumulative incidence rate — convert_age_to_cir","text":"age non-negative number representing individual's age. pop_prev positive number representing overall population prevalence. Must 1. Defaults 0.1. mid_point positive number representing mid point logistic function. Defaults 60. slope number holding rate increase. Defaults 1/8.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/convert_age_to_cir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert age to cumulative incidence rate — convert_age_to_cir","text":"age mid_point positive numbers, pop_prev positive number 0 1 slope valid number, convert_age_to_cir returns number, equal cumulative incidence rate.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/convert_age_to_cir.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert age to cumulative incidence rate — convert_age_to_cir","text":"Given person's age, convert_age_to_cir can used compute cumulative incidence rate (cir), given formula $$pop\\_ prev / (1 + exp((mid\\_ point - age) * slope))$$","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/convert_age_to_cir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert age to cumulative incidence rate — convert_age_to_cir","text":"","code":"curve(sapply(age, convert_age_to_cir), from = 10, to = 110, xname = \"age\")"},{"path":"EmilMiP.github.io/LTFHPlus/reference/convert_age_to_thresh.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert age to threshold — convert_age_to_thresh","title":"Convert age to threshold — convert_age_to_thresh","text":"convert_age_to_thresh computes threshold person's age using either logistic function truncated normal distribution","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/convert_age_to_thresh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert age to threshold — convert_age_to_thresh","text":"","code":"convert_age_to_thresh(   age,   dist = \"logistic\",   pop_prev = 0.1,   mid_point = 60,   slope = 1/8,   min_age = 10,   max_age = 90,   lower = stats::qnorm(0.05, lower.tail = FALSE),   upper = Inf )"},{"path":"EmilMiP.github.io/LTFHPlus/reference/convert_age_to_thresh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert age to threshold — convert_age_to_thresh","text":"age non-negative number representing individual's age. dist string indicating distribution use. dist = \"logistic\", logistic function used compute age onset. dist = \"normal\", truncated normal distribution used instead. Defaults \"logistic\". pop_prev necessary dist = \"logistic\". positive number representing overall population prevalence. Must 1. Defaults 0.1. mid_point necessary dist = \"logistic\". positive number representing mid point logistic function. Defaults 60. slope necessary dist = \"logistic\". number holding rate increase. Defaults 1/8. min_age necessary dist = \"normal\". positive number representing individual's earliest age. Defaults 10. max_age necessary dist = \"normal\". positive number representing individual's latest age. Must greater min_aoo. Defaults 90. lower necessary dist = \"normal\". number representing lower cutoff point truncated normal distribution. Defaults 1.645 (stats::qnorm(0.05, lower.tail = FALSE)). upper necessary dist = \"normal\". number representing upper cutoff point truncated normal distribution. Must greater equal lower. Defaults Inf.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/convert_age_to_thresh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert age to threshold — convert_age_to_thresh","text":"age positive number necessary arguments valid, convert_age_to_thresh returns number, equal threshold.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/convert_age_to_thresh.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert age to threshold — convert_age_to_thresh","text":"Given person's age, convert_age_to_thresh can used first compute cumulative incidence rate (cir), used compute threshold using either logistic function truncated normal distribution. logistic function, formula used compute threshold individual's age given $$qnorm(pop\\_ prev / (1 + exp((mid\\_ point - age) * slope)), lower.tail = F)$$, given $$qnorm((1 - (age-min\\_ age)/max\\_ age) * (pnorm(upper) - pnorm(lower)) + pnorm(lower))$$ truncated normal distribution.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/convert_age_to_thresh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert age to threshold — convert_age_to_thresh","text":"","code":"curve(sapply(age, convert_age_to_thresh), from = 10, to = 110, xname = \"age\")"},{"path":"EmilMiP.github.io/LTFHPlus/reference/convert_cir_to_age.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert cumulative incidence rate to age — convert_cir_to_age","title":"Convert cumulative incidence rate to age — convert_cir_to_age","text":"convert_cir_to_age computes age person's cumulative incidence rate.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/convert_cir_to_age.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert cumulative incidence rate to age — convert_cir_to_age","text":"","code":"convert_cir_to_age(cir, pop_prev = 0.1, mid_point = 60, slope = 1/8)"},{"path":"EmilMiP.github.io/LTFHPlus/reference/convert_cir_to_age.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert cumulative incidence rate to age — convert_cir_to_age","text":"cir positive number representing individual's cumulative incidence rate. pop_prev positive number representing overall population prevalence. Must 1 must larger cir. Defaults 0.1. mid_point positive number representing mid point logistic function. Defaults 60. slope number holding rate increase. Defaults 1/8.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/convert_cir_to_age.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert cumulative incidence rate to age — convert_cir_to_age","text":"cir mid_point positive numbers, pop_prev positive number 0 1 slope valid number, convert_cir_to_age returns number, equal current age.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/convert_cir_to_age.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert cumulative incidence rate to age — convert_cir_to_age","text":"Given person's cumulative incidence rate (cir), convert_cir_to_age can used compute corresponding age, given $$mid\\_ point - \\log(pop\\_ prev/cir - 1) * 1/slope$$","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/convert_cir_to_age.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert cumulative incidence rate to age — convert_cir_to_age","text":"","code":"curve(sapply(cir, convert_cir_to_age), from = 0.001, to = 0.099, xname = \"cir\")"},{"path":"EmilMiP.github.io/LTFHPlus/reference/convert_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Attempts to convert the list entry input format to a long format — convert_format","title":"Attempts to convert the list entry input format to a long format — convert_format","text":"Attempts convert list entry input format long format","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/convert_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Attempts to convert the list entry input format to a long format — convert_format","text":"","code":"convert_format(family, threshs, personal_id_col = \"pid\", role_col = NULL)"},{"path":"EmilMiP.github.io/LTFHPlus/reference/convert_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Attempts to convert the list entry input format to a long format — convert_format","text":"family tibble two entries, family id personal id. personal id end \"_role\", role column present. threshs thresholds, personal id (without role) well lower upper thresholds personal_id_col column name holds personal id role_col column name holds role","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/convert_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Attempts to convert the list entry input format to a long format — convert_format","text":"returns format similar prepare_LTFHPlus_input, used estimate_liability","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/convert_format.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Attempts to convert the list entry input format to a long format — convert_format","text":"","code":"family <- data.frame( fam_id = c(1, 1, 1, 1), pid = c(1, 2, 3, 4), role = c(\"o\", \"m\", \"f\", \"pgf\") )  threshs <- data.frame(   pid = c(1, 2, 3, 4),   lower = c(-Inf, -Inf, 0.8, 0.7),   upper = c(0.8, 0.8, 0.8, 0.7) )  convert_format(family, threshs) #>   fam_id pid role lower upper #> 1      1   1    o  -Inf   0.8 #> 2      1   2    m  -Inf   0.8 #> 3      1   3    f   0.8   0.8 #> 4      1   4  pgf   0.7   0.7"},{"path":"EmilMiP.github.io/LTFHPlus/reference/convert_liability_to_aoo.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert liability to age of onset — convert_liability_to_aoo","title":"Convert liability to age of onset — convert_liability_to_aoo","text":"convert_liability_to_aoo computes age onset individual's true underlying liability using either logistic function truncated normal distribution.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/convert_liability_to_aoo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert liability to age of onset — convert_liability_to_aoo","text":"","code":"convert_liability_to_aoo(   liability,   dist = \"logistic\",   pop_prev = 0.1,   mid_point = 60,   slope = 1/8,   min_aoo = 10,   max_aoo = 90,   lower = stats::qnorm(0.05, lower.tail = FALSE),   upper = Inf )"},{"path":"EmilMiP.github.io/LTFHPlus/reference/convert_liability_to_aoo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert liability to age of onset — convert_liability_to_aoo","text":"liability number representing individual's true underlying liability. dist string indicating distribution use. dist = \"logistic\", logistic function used compute age onset. dist = \"normal\", truncated normal distribution used instead. Defaults \"logistic\". pop_prev necessary dist = \"logistic\". positive number representing overall population prevalence. Must 1. Defaults 0.1. mid_point necessary dist = \"logistic\". positive number representing mid point logistic function. Defaults 60. slope necessary dist = \"logistic\". number holding rate increase. Defaults 1/8. min_aoo necessary dist = \"normal\". positive number representing individual's earliest age onset. Defaults 10. max_aoo necessary dist = \"normal\". positive number representing individual's latest age onset. Must greater min_aoo. Defaults 90. lower necessary dist = \"normal\". number representing lower cutoff point truncated normal distribution. Defaults 1.645 (stats::qnorm(0.05, lower.tail = FALSE)). upper necessary dist = \"normal\". number representing upper cutoff point truncated normal distribution. Must greater equal lower. Defaults Inf.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/convert_liability_to_aoo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert liability to age of onset — convert_liability_to_aoo","text":"liability number necessary arguments valid, convert_liability_to_aoo returns positive number, equal age onset.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/convert_liability_to_aoo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert liability to age of onset — convert_liability_to_aoo","text":"Given person's cumulative incidence rate (cir), convert_liability_to_aoo can used compute corresponding age. logistic function, age given $$mid\\_ point - log(pop\\_ prev/cir - 1) * 1/slope$$, given $$(1 - truncated\\_ normal\\_ cdf(liability = liability, lower = lower , upper = upper)) * max\\_ aoo + min\\_ aoo$$ truncated normal distribution.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/convert_liability_to_aoo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert liability to age of onset — convert_liability_to_aoo","text":"","code":"curve(sapply(liability, convert_liability_to_aoo), from = 1.3, to = 3.5, xname = \"liability\")   curve(sapply(liability, convert_liability_to_aoo, dist = \"normal\"),  from = qnorm(0.05, lower.tail = FALSE), to = 3.5, xname = \"liability\")"},{"path":"EmilMiP.github.io/LTFHPlus/reference/convert_observed_to_liability_scale.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert the heritability on the observed scale to that on the liability scale — convert_observed_to_liability_scale","title":"Convert the heritability on the observed scale to that on the liability scale — convert_observed_to_liability_scale","text":"convert_observed_to_liability_scale transforms heritability observed scale heritability liability scale.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/convert_observed_to_liability_scale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert the heritability on the observed scale to that on the liability scale — convert_observed_to_liability_scale","text":"","code":"convert_observed_to_liability_scale(   obs_h2 = 0.5,   pop_prev = 0.05,   prop_cases = 0.5 )"},{"path":"EmilMiP.github.io/LTFHPlus/reference/convert_observed_to_liability_scale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert the heritability on the observed scale to that on the liability scale — convert_observed_to_liability_scale","text":"obs_h2 number numeric vector representing liability-scale heritability(ies)observed scale. Must non-negative 1. Defaults 0.5 pop_prev number numeric vector representing population prevalence(s). entries must non-negative one. vector, must length obs_h2. Defaults 0.05. prop_cases Either NULL number numeric vector representing proportion cases sample. entries must non-negative one. vector, must length obs_h2. Defaults 0.5.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/convert_observed_to_liability_scale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert the heritability on the observed scale to that on the liability scale — convert_observed_to_liability_scale","text":"obs_h2, pop_prev prop_cases non-negative numbers one, function returns heritability liability scale using Equation 23 Sang Hong Lee, Naomi R. Wray, Michael E. Goddard Peter M. Visscher, \"Estimating Missing Heritability Diseases Genome-wide Association Studies\", American Journal Human Genetics, Volume 88, Issue 3, 2011, pp. 294-305, doi:10.1016/j.ajhg.2011.02.002 . obs_h2, pop_prev prop_cases non-negative numeric vectors entries one, function returns vector length obs_h2. entry holds heritability liability scale obtained corresponding entry obs_h2 using Equation 23. obs_h2 pop_prev non-negative numbers one prop_cases NULL, function returns heritability liability scale using Equation 17 Sang Hong Lee, Naomi R. Wray, Michael E. Goddard Peter M. Visscher, \"Estimating Missing Heritability Diseases Genome-wide Association Studies\", American Journal Human Genetics, Volume 88, Issue 3, 2011, pp. 294-305, doi:10.1016/j.ajhg.2011.02.002 . obs_h2 pop_prev non-negative numeric vectors entries one, prop_cases NULL, convert_observed_to_liability_scale returns vector length obq_h2. entry holds liability-scale heritability obtained corresponding entry obs_h2 using Equation 17.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/convert_observed_to_liability_scale.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert the heritability on the observed scale to that on the liability scale — convert_observed_to_liability_scale","text":"function can used transform heritability observed scale liability scale. convert_observed_to_liability_scale uses either Equation 17 (prop_cases = NULL) Equation 23 Sang Hong Lee, Naomi R. Wray, Michael E. Goddard Peter M. Visscher, \"Estimating Missing Heritability Diseases Genome-wide Association Studies\", American Journal Human Genetics, Volume 88, Issue 3, 2011, pp. 294-305, doi:10.1016/j.ajhg.2011.02.002  transform heritability observed scale heritability liability scale.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/convert_observed_to_liability_scale.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Convert the heritability on the observed scale to that on the liability scale — convert_observed_to_liability_scale","text":"Sang Hong Lee, Naomi R. Wray, Michael E. Goddard, Peter M. Visscher (2011, March). Estimating Missing Heritability Diseases Genome-wide Association Studies. American Journal Human Genetics (Vol. 88, Issue 3, pp. 294-305). doi:10.1016/j.ajhg.2011.02.002","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/convert_observed_to_liability_scale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert the heritability on the observed scale to that on the liability scale — convert_observed_to_liability_scale","text":"","code":"convert_observed_to_liability_scale() #> [1] 0.4242283 convert_observed_to_liability_scale(prop_cases=NULL) #> [1] 2.232781 convert_observed_to_liability_scale(obs_h2 = 0.8, pop_prev = 1/44,                                      prop_cases = NULL) #> [1] 6.105859 convert_observed_to_liability_scale(obs_h2 = c(0.5,0.8),                                      pop_prev = c(0.05, 1/44),                                      prop_cases = NULL) #> [1] 2.232781 6.105859"},{"path":"EmilMiP.github.io/LTFHPlus/reference/correct_positive_definite.html","id":null,"dir":"Reference","previous_headings":"","what":"Positive definite matrices — correct_positive_definite","title":"Positive definite matrices — correct_positive_definite","text":"correct_positive_definite verifies given covariance matrix indeed positive definite checking eigenvalues positive. given covariance matrix positive definite, correct_positive_definite tries modify underlying correlation matrices genetic_corrmat full_corrmat order obtain positive definite covariance matrix.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/correct_positive_definite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Positive definite matrices — correct_positive_definite","text":"","code":"correct_positive_definite(   covmat,   correction_val = 0.99,   correction_limit = 100 )"},{"path":"EmilMiP.github.io/LTFHPlus/reference/correct_positive_definite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Positive definite matrices — correct_positive_definite","text":"covmat symmetric numeric matrix. covariance matrix corrected, must number attributes, attr(covmat,\"fam_vec\"), attr(covmat,\"n_fam\"), attr(covmat,\"add_ind\"), attr(covmat,\"h2\"), attr(covmat,\"genetic_corrmat\"), attr(covmat,\"full_corrmat\") attr(covmat,\"phenotype_names\"). covariance matrix obtained construct_covmat, construct_covmat_single construct_covmat_multi attributes default. correction_val positive number representing amount genetic_corrmat full_corrmat changed, eigenvalues non-positive. , correction_val number multiplied off_diagonal entries genetic_corrmat full_corrmat. Defaults 0.99. correction_limit positive integer representing upper limit correction procedure. Defaults 100.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/correct_positive_definite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Positive definite matrices — correct_positive_definite","text":"covmat symmetric numeric matrix eigenvalues positive, correct_positive_definite simply returns covmat. eigenvalues positive correction_val positive number, correct_positive_definite tries convert covmat positive definite matrix. covmat attributes add_ind, h2, genetic_corrmat, full_corrmat phenotype_names, correct_positive_definite computes new covariance matrix using slightly modified correlation matrices genetic_corrmat full_corrmat. correction performed successfully, .e. new covariance matrix positive definite,new covariance matrix returned. Otherwise, correct_positive_definite returns original covariance matrix.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/correct_positive_definite.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Positive definite matrices — correct_positive_definite","text":"function can used verify given covariance matrix positive definite. calculates eigenvalues order investigate whether positive. property necessary covariance matrix used Gaussian covariance matrix. especially useful check whether covariance matrix obtained construct_covmat_multi positive definite. given covariance matrix positive definite, correct_positive_definite tries modify underlying correlation matrices (called genetic_corrmat full_corrmat construct_covmat construct_covmat_multi) multiplying -diagonal entries correlation matrices given number.","code":""},{"path":[]},{"path":"EmilMiP.github.io/LTFHPlus/reference/correct_positive_definite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Positive definite matrices — correct_positive_definite","text":"","code":"ntrait <- 2 genetic_corrmat <- matrix(0.6, ncol = ntrait, nrow = ntrait) diag(genetic_corrmat) <- 1 full_corrmat <- matrix(-0.25, ncol = ntrait, nrow = ntrait) diag(full_corrmat) <- 1 h2_vec <- rep(0.6, ntrait) cov <- construct_covmat(fam_vec = c(\"m\", \"f\"),   genetic_corrmat = genetic_corrmat,   h2 = h2_vec,   full_corrmat = full_corrmat) cov #>              g_phenotype1 o_phenotype1 m_phenotype1 f_phenotype1 g_phenotype2 #> g_phenotype1         0.60         0.60         0.30         0.30         0.36 #> o_phenotype1         0.60         1.00         0.30         0.30         0.36 #> m_phenotype1         0.30         0.30         1.00         0.00         0.18 #> f_phenotype1         0.30         0.30         0.00         1.00         0.18 #> g_phenotype2         0.36         0.36         0.18         0.18         0.60 #> o_phenotype2         0.36        -0.25         0.18         0.18         0.60 #> m_phenotype2         0.18         0.18        -0.25         0.00         0.30 #> f_phenotype2         0.18         0.18         0.00        -0.25         0.30 #>              o_phenotype2 m_phenotype2 f_phenotype2 #> g_phenotype1         0.36         0.18         0.18 #> o_phenotype1        -0.25         0.18         0.18 #> m_phenotype1         0.18        -0.25         0.00 #> f_phenotype1         0.18         0.00        -0.25 #> g_phenotype2         0.60         0.30         0.30 #> o_phenotype2         1.00         0.30         0.30 #> m_phenotype2         0.30         1.00         0.00 #> f_phenotype2         0.30         0.00         1.00 #> attr(,\"fam_vec\") #> [1] \"g\" \"o\" \"m\" \"f\" #> attr(,\"n_fam\") #>  #> f g m o  #> 1 1 1 1  #> attr(,\"add_ind\") #> [1] TRUE #> attr(,\"h2\") #> [1] 0.6 0.6 #> attr(,\"genetic_corrmat\") #>      [,1] [,2] #> [1,]  1.0  0.6 #> [2,]  0.6  1.0 #> attr(,\"full_corrmat\") #>       [,1]  [,2] #> [1,]  1.00 -0.25 #> [2,] -0.25  1.00 #> attr(,\"phenotype_names\") #> [1] \"phenotype1\" \"phenotype2\" correct_positive_definite(cov) #> The specified covariance matrix is not positive definite.  #> Trying to correct the covariance matrix... #> The correction was performed successfully! All off-diagonal entries are corrected by0.656. #>              g_phenotype1 o_phenotype1 m_phenotype1 f_phenotype1 g_phenotype2 #> g_phenotype1    0.6000000    0.6000000    0.3000000    0.3000000    0.2360373 #> o_phenotype1    0.6000000    1.0000000    0.3000000    0.3000000    0.2360373 #> m_phenotype1    0.3000000    0.3000000    1.0000000    0.0000000    0.1180187 #> f_phenotype1    0.3000000    0.3000000    0.0000000    1.0000000    0.1180187 #> g_phenotype2    0.2360373    0.2360373    0.1180187    0.1180187    0.6000000 #> o_phenotype2    0.2360373   -0.1639148    0.1180187    0.1180187    0.6000000 #> m_phenotype2    0.1180187    0.1180187   -0.1639148    0.0000000    0.3000000 #> f_phenotype2    0.1180187    0.1180187    0.0000000   -0.1639148    0.3000000 #>              o_phenotype2 m_phenotype2 f_phenotype2 #> g_phenotype1    0.2360373    0.1180187    0.1180187 #> o_phenotype1   -0.1639148    0.1180187    0.1180187 #> m_phenotype1    0.1180187   -0.1639148    0.0000000 #> f_phenotype1    0.1180187    0.0000000   -0.1639148 #> g_phenotype2    0.6000000    0.3000000    0.3000000 #> o_phenotype2    1.0000000    0.3000000    0.3000000 #> m_phenotype2    0.3000000    1.0000000    0.0000000 #> f_phenotype2    0.3000000    0.0000000    1.0000000 #> attr(,\"fam_vec\") #> [1] \"g\" \"o\" \"m\" \"f\" #> attr(,\"n_fam\") #>  #> f g m o  #> 1 1 1 1  #> attr(,\"add_ind\") #> [1] TRUE #> attr(,\"h2\") #> [1] 0.6 0.6 #> attr(,\"genetic_corrmat\") #>           [,1]      [,2] #> [1,] 1.0000000 0.3933955 #> [2,] 0.3933955 1.0000000 #> attr(,\"full_corrmat\") #>            [,1]       [,2] #> [1,]  1.0000000 -0.1639148 #> [2,] -0.1639148  1.0000000 #> attr(,\"phenotype_names\") #> [1] \"phenotype1\" \"phenotype2\""},{"path":"EmilMiP.github.io/LTFHPlus/reference/estimate_gen_liability_ltfh.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate genetic liability similar to LT-FH — estimate_gen_liability_ltfh","title":"Estimate genetic liability similar to LT-FH — estimate_gen_liability_ltfh","text":"Estimate genetic liability similar LT-FH","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/estimate_gen_liability_ltfh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate genetic liability similar to LT-FH — estimate_gen_liability_ltfh","text":"","code":"estimate_gen_liability_ltfh(   h2,   phen,   child_threshold,   parent_threshold,   status_col_offspring = \"CHILD_STATUS\",   status_col_father = \"P1_STATUS\",   status_col_mother = \"P2_STATUS\",   status_col_siblings = \"SIB_STATUS\",   number_of_siblings_col = \"NUM_SIBS\",   tol = 0.01 )"},{"path":"EmilMiP.github.io/LTFHPlus/reference/estimate_gen_liability_ltfh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate genetic liability similar to LT-FH — estimate_gen_liability_ltfh","text":"h2 Liability scale heritability trait analysed. phen tibble data.frame status genotyped individual, parents siblings. child_threshold single numeric value used threshold offspring siblings. parent_threshold single numeric value used threshold parents status_col_offspring Column name status offspring status_col_father Column name status father status_col_mother Column name status mother status_col_siblings Column name status siblings number_of_siblings_col Column name number siblings given individual tol Convergence criteria Gibbs sampler. Default 0.01, meaning standard error mean 0.01","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/estimate_gen_liability_ltfh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate genetic liability similar to LT-FH — estimate_gen_liability_ltfh","text":"Returns estimated genetic liabilities.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/estimate_gen_liability_ltfh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate genetic liability similar to LT-FH — estimate_gen_liability_ltfh","text":"","code":"phen <- data.frame( CHILD_STATUS = c(0,0), P1_STATUS = c(1,1), P2_STATUS = c(0,1), SIB_STATUS = c(1,0), NUM_SIBS = c(2,0))  h2 <- 0.5 child_threshold <- 0.7 parent_threshold <- 0.8  estimate_gen_liability_ltfh(h2, phen, child_threshold, parent_threshold) #>   CHILD_STATUS P1_STATUS P2_STATUS SIB_STATUS NUM_SIBS post_gen_liab #> 1            0         1         0          1        2     0.1556253 #> 2            0         1         1          0        0     0.3476219 #>   post_gen_liab_se #> 1      0.003051023 #> 2      0.003225214"},{"path":"EmilMiP.github.io/LTFHPlus/reference/estimate_liability.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimating the genetic or full liability for a variable number of phenotypes — estimate_liability","title":"Estimating the genetic or full liability for a variable number of phenotypes — estimate_liability","text":"estimate_liability estimates genetic component full liability /full liability number individuals based family history one phenotypes.  wrapper around estimate_liability_single estimate_liability_multi.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/estimate_liability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimating the genetic or full liability for a variable number of phenotypes — estimate_liability","text":"","code":"estimate_liability(   .tbl = NULL,   family_graphs = NULL,   h2 = 0.5,   pid = \"PID\",   fam_id = \"fam_ID\",   role = \"role\",   family_graphs_col = \"fam_graph\",   out = c(1),   tol = 0.01,   genetic_corrmat = NULL,   full_corrmat = NULL,   phen_names = NULL )"},{"path":"EmilMiP.github.io/LTFHPlus/reference/estimate_liability.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimating the genetic or full liability for a variable number of phenotypes — estimate_liability","text":".tbl matrix, list data frame can converted tibble. Must least five columns hold family identifier, personal identifier, role lower upper thresholds phenotypes interest. Note role must one following abbreviations g (Genetic component full liability) o (Full liability) m (Mother) f (Father) c[0-9]*.[0-9]* (Children) mgm (Maternal grandmother) mgf (Maternal grandfather) pgm (Paternal grandmother) pgf (Paternal grandfather) s[0-9]* (Full siblings) mhs[0-9]* (Half-siblings - maternal side) phs[0-9]* (Half-siblings - paternal side) mau[0-9]* (Aunts/Uncles - maternal side) pau[0-9]* (Aunts/Uncles - paternal side). Defaults NULL. family_graphs tibble columns pid family_graph_col. See prepare_graph construction graphs. family graphs Defaults NULL. h2 Either number representing heritability liability scale single phenotype, numeric vector representing liability-scale heritabilities phenotypes. entries h2 must non-negative 1. pid string holding name column family threshs hold personal identifier(s). Defaults \"PID\". fam_id string holding name column family holds family identifier. Defaults \"fam_ID\". role string holding name column .tbl holds role.role must chosen following list abbreviations g (Genetic component full liability) o (Full liability) m (Mother) f (Father) c[0-9]*.[0-9]* (Children) mgm (Maternal grandmother) mgf (Maternal grandfather) pgm (Paternal grandmother) pgf (Paternal grandfather) s[0-9]* (Full siblings) mhs[0-9]* (Half-siblings - maternal side) phs[0-9]* (Half-siblings - paternal side) mau[0-9]* (Aunts/Uncles - maternal side) pau[0-9]* (Aunts/Uncles - paternal side). Defaults \"role\". family_graphs_col Name column family graphs family_graphs. Defaults \"fam_graph\". character numeric vector indicating whether genetic component full liability, full liability returned. = c(1) = c(\"genetic\"), genetic liability estimated returned. = c(2) = c(\"full\"), full liability estimated returned. = c(1,2) = c(\"genetic\", \"full\"), components estimated returned. Defaults c(1). tol number used convergence criterion Gibbs sampler. Equals standard error mean. , tolerance 0.2 means standard error mean 0.2. Defaults 0.01. genetic_corrmat Either NULL (h2 number) numeric matrix (h2 vector length > 1) holding genetic correlations desired phenotypes. diagonal entries must equal one, -diagonal entries must -1 1. addition, matrix must symmetric. Defaults NULL. full_corrmat Either NULL (h2 number) numeric matrix (h2 vector length > 1) holding full correlations desired phenotypes. diagonal entries must equal one, -diagonal entries must -1 1. addition, matrix must symmetric. Defaults NULL. phen_names Either NULL character vector holding phenotype names. names used create row column names covariance matrix. specified, names default phenotype1, phenotype2, etc. Defaults NULL.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/estimate_liability.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimating the genetic or full liability for a variable number of phenotypes — estimate_liability","text":"family threshs two matrices, lists data frames can converted tibbles, family two columns named like strings represented pid fam_id, threshs column named like string given pid well column named \"lower\" column named \"upper\" liability-scale heritability h2 number (length(h2)=1), , tol always_add required form, function returns tibble either four six columns (depending length ). first two columns correspond columns fam_id pid ' present family. equal c(1) c(\"genetic\"), third fourth column hold estimated genetic liability well corresponding standard error, respectively. equals c(2) c(\"full\"), third fourth column hold estimated full liability well corresponding standard error, respectively. equal c(1,2) c(\"genetic\",\"full\"), third fourth column hold estimated genetic liability well corresponding standard error, respectively, fifth sixth column hold estimated full liability well corresponding standard error, respectively. h2 numeric vector length greater 1 genetic_corrmat, full_corrmat, tol required form, function returns tibble least six columns (depending length ). first two columns correspond columns fam_id pid present tibble family. equal c(1) c(\"genetic\"), third fourth columns hold estimated genetic liability well corresponding standard error first phenotype, respectively. equals c(2) c(\"full\"), third fourth columns hold estimated full liability well corresponding standard error first phenotype, respectively. equal c(1,2) c(\"genetic\",\"full\"), third fourth columns hold estimated genetic liability well corresponding standard error first phenotype, respectively, fifth sixth columns hold estimated full liability well corresponding standard error first phenotype, respectively. remaining columns hold estimated genetic liabilities /estimated full liabilities well corresponding standard errors remaining phenotypes.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/estimate_liability.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimating the genetic or full liability for a variable number of phenotypes — estimate_liability","text":"function can used estimate either genetic component full liability, full liability variable number traits.","code":""},{"path":[]},{"path":"EmilMiP.github.io/LTFHPlus/reference/estimate_liability.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimating the genetic or full liability for a variable number of phenotypes — estimate_liability","text":"","code":"genetic_corrmat <- matrix(0.4, 3, 3) diag(genetic_corrmat) <- 1 full_corrmat <- matrix(0.6, 3, 3) diag(full_corrmat) <- 1 # sims <- simulate_under_LTM(fam_vec = c(\"m\",\"f\"), n_fam = NULL, add_ind = TRUE,  genetic_corrmat = genetic_corrmat, full_corrmat = full_corrmat, h2 = rep(.5,3),  n_sim = 1, pop_prev = rep(.1,3)) estimate_liability(.tbl = sims$thresholds, h2 = rep(.5,3),  genetic_corrmat = genetic_corrmat, full_corrmat = full_corrmat, pid = \"indiv_ID\", fam_id = \"fam_ID\", role = \"role\", out = c(1),  phen_names = paste0(\"phenotype\", 1:3), tol = 0.01) #> The number of workers is 1 #> # A tibble: 1 × 8 #>   fam_ID   indiv_ID genetic_phenotype1_est genetic_phenotype1_se #>   <chr>    <chr>                     <dbl>                 <dbl> #> 1 fam_ID_1 fam_ID_1                  0.248               0.00588 #> # ℹ 4 more variables: genetic_phenotype2_est <dbl>, #> #   genetic_phenotype2_se <dbl>, genetic_phenotype3_est <dbl>, #> #   genetic_phenotype3_se <dbl>"},{"path":"EmilMiP.github.io/LTFHPlus/reference/estimate_liability_multi.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimating the genetic or full liability for multiple phenotypes — estimate_liability_multi","title":"Estimating the genetic or full liability for multiple phenotypes — estimate_liability_multi","text":"estimate_liability_multi estimates genetic component full liability /full liability number individuals based family history variable number phenotypes.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/estimate_liability_multi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimating the genetic or full liability for multiple phenotypes — estimate_liability_multi","text":"","code":"estimate_liability_multi(   .tbl = NULL,   family_graphs = NULL,   h2_vec,   genetic_corrmat,   full_corrmat,   phen_names = NULL,   pid = \"PID\",   fam_id = \"fam_ID\",   role = \"role\",   family_graphs_col = \"fam_graph\",   out = c(1),   tol = 0.01 )"},{"path":"EmilMiP.github.io/LTFHPlus/reference/estimate_liability_multi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimating the genetic or full liability for multiple phenotypes — estimate_liability_multi","text":".tbl matrix, list data frame can converted tibble. Must least seven columns hold family identifier, personal identifier, role lower upper thresholds phenotypes interest. Note role must one following abbreviations g (Genetic component full liability) o (Full liability) m (Mother) f (Father) c[0-9]*.[0-9]* (Children) mgm (Maternal grandmother) mgf (Maternal grandfather) pgm (Paternal grandmother) pgf (Paternal grandfather) s[0-9]* (Full siblings) mhs[0-9]* (Half-siblings - maternal side) phs[0-9]* (Half-siblings - paternal side) mau[0-9]* (Aunts/Uncles - maternal side) pau[0-9]* (Aunts/Uncles - paternal side). Defaults NULL. family_graphs tibble columns pid family_graph_col. See prepare_graph construction graphs. family graphs Defaults NULL. h2_vec numeric vector representing liability-scale heritabilities phenotypes. entries h2_vec must non-negative 1. genetic_corrmat numeric matrix holding genetic correlations desired phenotypes. diagonal entries must equal one, -diagonal entries must -1 1. addition, matrix must symmetric. full_corrmat numeric matrix holding full correlations desired phenotypes. diagonal entries must equal one, -diagonal entries must -1 1. addition, matrix must symmetric. phen_names character vector holding phenotype names. names used create row column names covariance matrix. specified, names default phenotype1, phenotype2, etc. Defaults NULL. pid string holding name column family threshs hold personal identifier(s). Defaults \"PID\". fam_id string holding name column family holds family identifier. Defaults \"fam_ID\". role string holding name column .tbl holds role.role must chosen following list abbreviations g (Genetic component full liability) o (Full liability) m (Mother) f (Father) c[0-9]*.[0-9]* (Children) mgm (Maternal grandmother) mgf (Maternal grandfather) pgm (Paternal grandmother) pgf (Paternal grandfather) s[0-9]* (Full siblings) mhs[0-9]* (Half-siblings - maternal side) phs[0-9]* (Half-siblings - paternal side) mau[0-9]* (Aunts/Uncles - maternal side) pau[0-9]* (Aunts/Uncles - paternal side). Defaults \"role\". family_graphs_col Name column family graphs family_graphs. Defaults \"fam_graph\". character numeric vector indicating whether genetic component full liability, full liability returned. = c(1) = c(\"genetic\"), genetic liability estimated returned. = c(2) = c(\"full\"), full liability estimated returned. = c(1,2) = c(\"genetic\", \"full\"), components estimated returned. Defaults c(1). tol number used convergence criterion Gibbs sampler. Equals standard error mean. , tolerance 0.2 means standard error mean 0.2. Defaults 0.01.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/estimate_liability_multi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimating the genetic or full liability for multiple phenotypes — estimate_liability_multi","text":"family threshs two matrices, lists data frames can converted tibbles, family two columns named like strings represented pid fam_id, threshs column named like string given pid well column named \"lower\" column named \"upper\" liability-scale heritabilities h2_vec, genetic_corrmat, full_corrmat, tol required form, function returns tibble least six columns (depending length ). first two columns correspond columns fam_id pid present tibble family. equal c(1) c(\"genetic\"), third fourth columns hold estimated genetic liability well corresponding standard error first phenotype, respectively. equals c(2) c(\"full\"), third fourth columns hold estimated full liability well corresponding standard error first phenotype, respectively. equal c(1,2) c(\"genetic\",\"full\"), third fourth columns hold estimated genetic liability well corresponding standard error first phenotype, respectively, fifth sixth columns hold estimated full liability well corresponding standard error first phenotype, respectively. remaining columns hold estimated genetic liabilities /estimated full liabilities well corresponding standard errors remaining phenotypes.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/estimate_liability_multi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimating the genetic or full liability for multiple phenotypes — estimate_liability_multi","text":"function can used estimate either genetic component full liability, full liability variable number traits.","code":""},{"path":[]},{"path":"EmilMiP.github.io/LTFHPlus/reference/estimate_liability_multi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimating the genetic or full liability for multiple phenotypes — estimate_liability_multi","text":"","code":"genetic_corrmat <- matrix(0.4, 3, 3) diag(genetic_corrmat) <- 1 full_corrmat <- matrix(0.6, 3, 3) diag(full_corrmat) <- 1 # sims <- simulate_under_LTM(fam_vec = c(\"m\",\"f\"), n_fam = NULL, add_ind = TRUE,  genetic_corrmat = genetic_corrmat, full_corrmat = full_corrmat, h2 = rep(.5,3),  n_sim = 1, pop_prev = rep(.1,3)) estimate_liability_multi(.tbl = sims$thresholds, h2_vec = rep(.5,3),  genetic_corrmat = genetic_corrmat, full_corrmat = full_corrmat, pid = \"indiv_ID\", fam_id = \"fam_ID\", role = \"role\", out = c(1),  phen_names = paste0(\"phenotype\", 1:3), tol = 0.01) #> The number of workers is 1 #> # A tibble: 1 × 8 #>   fam_ID   indiv_ID genetic_phenotype1_est genetic_phenotype1_se #>   <chr>    <chr>                     <dbl>                 <dbl> #> 1 fam_ID_1 fam_ID_1                 -0.101               0.00744 #> # ℹ 4 more variables: genetic_phenotype2_est <dbl>, #> #   genetic_phenotype2_se <dbl>, genetic_phenotype3_est <dbl>, #> #   genetic_phenotype3_se <dbl>"},{"path":"EmilMiP.github.io/LTFHPlus/reference/estimate_liability_single.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimating the genetic or full liability — estimate_liability_single","title":"Estimating the genetic or full liability — estimate_liability_single","text":"estimate_liability_single estimates genetic component full liability /full liability number individuals based family history.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/estimate_liability_single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimating the genetic or full liability — estimate_liability_single","text":"","code":"estimate_liability_single(   .tbl = NULL,   family_graphs = NULL,   h2 = 0.5,   pid = \"PID\",   fam_id = \"fam_ID\",   family_graphs_col = \"fam_graph\",   role = NULL,   out = c(1),   tol = 0.01 )"},{"path":"EmilMiP.github.io/LTFHPlus/reference/estimate_liability_single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimating the genetic or full liability — estimate_liability_single","text":".tbl matrix, list data frame can converted tibble. Must least five columns hold family identifier, personal identifier, role lower upper thresholds. Note role must one following abbreviations g (Genetic component full liability) o (Full liability) m (Mother) f (Father) c[0-9]*.[0-9]* (Children) mgm (Maternal grandmother) mgf (Maternal grandfather) pgm (Paternal grandmother) pgf (Paternal grandfather) s[0-9]* (Full siblings) mhs[0-9]* (Half-siblings - maternal side) phs[0-9]* (Half-siblings - paternal side) mau[0-9]* (Aunts/Uncles - maternal side) pau[0-9]* (Aunts/Uncles - paternal side). Defaults NULL. family_graphs tibble columns pid family_graph_col. See prepare_graph construction graphs. family graphs Defaults NULL. h2 number representing heritability liability scale single phenotype. Must non-negative. Note liability threshold model, heritability must also 1. Defaults 0.5. pid string holding name column .tbl (family threshs) hold personal identifier(s). Defaults \"PID\". fam_id string holding name column .tbl family holds family identifier. Defaults \"fam_ID\". family_graphs_col Name column family graphs family_graphs. Defaults \"fam_graph\". role string holding name column .tbl holds role. role must chosen following list abbreviations g (Genetic component full liability) o (Full liability) m (Mother) f (Father) c[0-9]*.[0-9]* (Children) mgm (Maternal grandmother) mgf (Maternal grandfather) pgm (Paternal grandmother) pgf (Paternal grandfather) s[0-9]* (Full siblings) mhs[0-9]* (Half-siblings - maternal side) phs[0-9]* (Half-siblings - paternal side) mau[0-9]* (Aunts/Uncles - maternal side) pau[0-9]* (Aunts/Uncles - paternal side). Defaults \"role\". character numeric vector indicating whether genetic component full liability, full liability returned. = c(1) = c(\"genetic\"), genetic liability estimated returned. = c(2) = c(\"full\"), full liability estimated returned. = c(1,2) = c(\"genetic\", \"full\"), components estimated returned. Defaults c(1). tol number used convergence criterion Gibbs sampler. Equals standard error mean. , tolerance 0.2 means standard error mean 0.2. Defaults 0.01.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/estimate_liability_single.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimating the genetic or full liability — estimate_liability_single","text":"family threshs two matrices, lists data frames can converted tibbles, family two columns named like strings represented pid fam_id, threshs column named like string given pid well column named \"lower\" column named \"upper\" liability-scale heritability h2, , tol always_add required form, function returns tibble either four six columns (depending length ). first two columns correspond columns fam_id pid ' present family. equal c(1) c(\"genetic\"), third fourth column hold estimated genetic liability well corresponding standard error, respectively. equals c(2) c(\"full\"), third fourth column hold estimated full liability well corresponding standard error, respectively. equal c(1,2) c(\"genetic\",\"full\"), third fourth column hold estimated genetic liability well corresponding standard error, respectively, fifth sixth column hold estimated full liability well corresponding standard error, respectively.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/estimate_liability_single.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimating the genetic or full liability — estimate_liability_single","text":"function can used estimate either genetic component full liability, full liability . possible input either","code":""},{"path":[]},{"path":"EmilMiP.github.io/LTFHPlus/reference/estimate_liability_single.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimating the genetic or full liability — estimate_liability_single","text":"","code":"sims <- simulate_under_LTM(fam_vec = c(\"m\",\"f\",\"s1\"), n_fam = NULL,  add_ind = TRUE, h2 = 0.5, n_sim=10, pop_prev = .05) # estimate_liability_single(.tbl = sims$thresholds,  h2 = 0.5, pid = \"indiv_ID\", fam_id = \"fam_ID\", role = \"role\", out = c(1),  tol = 0.01) #> The number of workers is 1 #> # A tibble: 10 × 4 #>    fam_ID    indiv_ID  genetic_est genetic_se #>    <chr>     <chr>           <dbl>      <dbl> #>  1 fam_ID_1  fam_ID_1     -0.00220    0.00403 #>  2 fam_ID_2  fam_ID_2     -0.0323     0.00435 #>  3 fam_ID_3  fam_ID_3      0.968      0.00175 #>  4 fam_ID_4  fam_ID_4     -0.0112     0.00411 #>  5 fam_ID_5  fam_ID_5     -0.0321     0.00413 #>  6 fam_ID_6  fam_ID_6     -0.0276     0.00429 #>  7 fam_ID_7  fam_ID_7     -0.0399     0.00435 #>  8 fam_ID_8  fam_ID_8      1.32       0.00168 #>  9 fam_ID_9  fam_ID_9     -0.0237     0.00431 #> 10 fam_ID_10 fam_ID_10    -0.0116     0.00450 #  sims <- simulate_under_LTM(fam_vec = c(), n_fam = NULL, add_ind = TRUE,  h2 = 0.5, n_sim=10, pop_prev = .05) #> Warning: Neither fam_vec nor n_fam is specified... # estimate_liability_single(.tbl = sims$thresholds,  h2 = 0.5, pid = \"indiv_ID\", fam_id = \"fam_ID\", role = \"role\", out = c(\"genetic\"), tol = 0.01) #> The number of workers is 1 #> # A tibble: 10 × 4 #>    fam_ID    indiv_ID  genetic_est genetic_se #>    <chr>     <chr>           <dbl>      <dbl> #>  1 fam_ID_1  fam_ID_1     0.00251     0.00374 #>  2 fam_ID_2  fam_ID_2     0.000619    0.00383 #>  3 fam_ID_3  fam_ID_3    -0.00255     0.00378 #>  4 fam_ID_4  fam_ID_4    -0.000767    0.00375 #>  5 fam_ID_5  fam_ID_5     0.00378     0.00374 #>  6 fam_ID_6  fam_ID_6    -0.00589     0.00408 #>  7 fam_ID_7  fam_ID_7    -0.00115     0.00392 #>  8 fam_ID_8  fam_ID_8    -0.00738     0.00405 #>  9 fam_ID_9  fam_ID_9    -0.0105      0.00366 #> 10 fam_ID_10 fam_ID_10   -0.00541     0.00365"},{"path":"EmilMiP.github.io/LTFHPlus/reference/fixSexCoding.html","id":null,"dir":"Reference","previous_headings":"","what":"Fixing sex coding in trio info — fixSexCoding","title":"Fixing sex coding in trio info — fixSexCoding","text":"Internal function used assist fixing sex coding separately id coding type.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/fixSexCoding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fixing sex coding in trio info — fixSexCoding","text":"","code":"fixSexCoding(x, sex_coding = TRUE, dadid, momid)"},{"path":"EmilMiP.github.io/LTFHPlus/reference/fixSexCoding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fixing sex coding in trio info — fixSexCoding","text":"x current row check sex_coding logical. sex coded character? dadid column name father ids momid column name mother ids","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/fixSexCoding.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fixing sex coding in trio info — fixSexCoding","text":"appropriate sex coding","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/get_all_combs.html","id":null,"dir":"Reference","previous_headings":"","what":"construct all combinations of input vector — get_all_combs","title":"construct all combinations of input vector — get_all_combs","text":"pastes together combinations input vector","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/get_all_combs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"construct all combinations of input vector — get_all_combs","text":"","code":"get_all_combs(vec)"},{"path":"EmilMiP.github.io/LTFHPlus/reference/get_all_combs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"construct all combinations of input vector — get_all_combs","text":"vec vector strings","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/get_all_combs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"construct all combinations of input vector — get_all_combs","text":"vector strings returned.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/get_all_combs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"construct all combinations of input vector — get_all_combs","text":"","code":"get_all_combs(letters[1:3]) #> [1] \"b_a\" \"c_a\" \"a_b\" \"c_b\" \"a_c\" \"b_c\""},{"path":"EmilMiP.github.io/LTFHPlus/reference/get_kinship.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct kinship matrix from graph — get_kinship","title":"Construct kinship matrix from graph — get_kinship","text":"construct kinship matrix graph representation family, centered index person (proband).","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/get_kinship.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct kinship matrix from graph — get_kinship","text":"","code":"get_kinship(fam_graph, h2, index_id = NA, add_ind = TRUE, fix_diag = TRUE)"},{"path":"EmilMiP.github.io/LTFHPlus/reference/get_kinship.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct kinship matrix from graph — get_kinship","text":"fam_graph graph. h2 heritability. index_id proband id. used conjuction add_ind = TRUE. add_ind add genetic liability kinship matrix. Defaults true. fix_diag Whether set diagonal 1 entries except genetic liability.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/get_kinship.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct kinship matrix from graph — get_kinship","text":"kinship matrix.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/get_kinship.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct kinship matrix from graph — get_kinship","text":"","code":"fam <- data.frame( i = c(1, 2, 3, 4), f = c(3, 0, 4, 0), m = c(2, 0, 0, 0) )  thresholds <- data.frame(   i = c(1, 2, 3, 4),   lower = c(-Inf, -Inf, 0.8, 0.7),   upper = c(0.8, 0.8, 0.8, 0.7) )  graph <- prepare_graph(fam, icol = \"i\", fcol = \"f\", mcol = \"m\", thresholds = thresholds)  get_kinship(graph, h2 = 0.5, index_id = \"1\") #>         1    2    3     4   1_g #> 1   1.000 0.25 0.25 0.125 0.500 #> 2   0.250 1.00 0.00 0.000 0.250 #> 3   0.250 0.00 1.00 0.250 0.250 #> 4   0.125 0.00 0.25 1.000 0.125 #> 1_g 0.500 0.25 0.25 0.125 0.500"},{"path":"EmilMiP.github.io/LTFHPlus/reference/get_relatedness.html","id":null,"dir":"Reference","previous_headings":"","what":"Relatedness between a pair of family members — get_relatedness","title":"Relatedness between a pair of family members — get_relatedness","text":"get_relatedness returns relatedness times liability-scale heritability pair family members","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/get_relatedness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relatedness between a pair of family members — get_relatedness","text":"","code":"get_relatedness(s1, s2, h2 = 0.5, from_covmat = FALSE)"},{"path":"EmilMiP.github.io/LTFHPlus/reference/get_relatedness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Relatedness between a pair of family members — get_relatedness","text":"s1, s2 Strings representing two family members. strings must chosen following list strings: g (Genetic component full liability) o (Full liability) m (Mother) f (Father) c[0-9]*.[0-9]* (Children) mgm (Maternal grandmother) mgf (Maternal grandfather) pgm (Paternal grandmother) pgf (Paternal grandfather) s[0-9]* (Full siblings) mhs[0-9]* (Half-siblings - maternal side) phs[0-9]* (Half-siblings - paternal side) mau[0-9]* (Aunts/Uncles - maternal side) pau[0-9]* (Aunts/Uncles - paternal side). h2 number representing squared heritability liability scale. Must non-negative 1. Defaults 0.5 from_covmat logical variable. used internally. allows skip negative check.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/get_relatedness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Relatedness between a pair of family members — get_relatedness","text":"s1 s2 strings chosen mentioned list strings h2 number satisfying \\(0 \\leq h2 \\leq 1\\), output number equals percentage shared DNA s1 s2 times squared heritability h2.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/get_relatedness.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Relatedness between a pair of family members — get_relatedness","text":"function can used get percentage shared DNA times liability-scale heritability \\(h^2\\) two family members.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/get_relatedness.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Relatedness between a pair of family members — get_relatedness","text":"interested percentage shared DNA, set h2 = 1.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/get_relatedness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Relatedness between a pair of family members — get_relatedness","text":"","code":"get_relatedness(\"g\",\"o\") #> [1] 0.5 get_relatedness(\"g\",\"f\", h2 = 1) #> [1] 0.5 get_relatedness(\"o\",\"s\", h2 = 0.3) #> [1] 0.15   # This will result in errors: try(get_relatedness(\"a\",\"b\")) #> Error in validate_relatives(s1) :  #>   s1 contains invalid abbreviations! Use strings from the following list:  #>  #>   - g (Genetic component of full liability) #>  #>   - o (Full liability) #>  #>   - m (Mother) #>  #>   - f (Father) #>  #>   - c[0-9]*.[0-9]* (Children) #>  #>   - mgm (Maternal grandmother) #>  #>   - mgf (Maternal grandfather) #>  #>   - pgm (Paternal grandmother) #>  #>   - pgf (Paternal grandfather) #>  #>   - s[0-9]* (Full siblings) #>  #>   - mhs[0-9]* (Half-siblings - maternal side) #>  #>   - phs[0-9]* (Half-siblings - paternal side) #>  #>   - mau[0-9]* (Aunts/Uncles - maternal side) #>  #>   - pau[0-9]* (Aunts/Uncles - paternal side). try(get_relatedness(m, mhs)) #> Error in eval(expr, envir) : object 'm' not found"},{"path":"EmilMiP.github.io/LTFHPlus/reference/graph_based_covariance_construction.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructing covariance matrix from local family graph — graph_based_covariance_construction","title":"Constructing covariance matrix from local family graph — graph_based_covariance_construction","text":"Function constructs genetic covariance matrix given graph around proband extracts threshold information graph.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/graph_based_covariance_construction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructing covariance matrix from local family graph — graph_based_covariance_construction","text":"","code":"graph_based_covariance_construction(   pid,   cur_proband_id,   cur_family_graph,   h2,   add_ind = TRUE )"},{"path":"EmilMiP.github.io/LTFHPlus/reference/graph_based_covariance_construction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructing covariance matrix from local family graph — graph_based_covariance_construction","text":"pid Name column personal ID cur_proband_id id proband cur_family_graph local graph current proband h2 liability scale heritability add_ind whether add genetic liability proband . Defaults true.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/graph_based_covariance_construction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructing covariance matrix from local family graph — graph_based_covariance_construction","text":"list two elements. first element temp_tbl, contains id current proband, family ID lower upper thresholds. second element, cov, covariance matrix local graph centered current proband.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/graph_based_covariance_construction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructing covariance matrix from local family graph — graph_based_covariance_construction","text":"","code":"fam <- data.frame(   id = c(\"pid\", \"mom\", \"dad\", \"pgf\"),   dadcol = c(\"dad\", 0, \"pgf\", 0),   momcol = c(\"mom\", 0, 0, 0))  thresholds <- data.frame(   id = c(\"pid\", \"mom\", \"dad\", \"pgf\"),   lower = c(-Inf, -Inf, 0.8, 0.7),   upper = c(0.8, 0.8, 0.8, 0.7))  graph <- prepare_graph(fam, icol = \"id\", fcol = \"dadcol\", mcol = \"momcol\", thresholds = thresholds)  graph_based_covariance_construction(pid = \"id\",                                     cur_proband_id = \"pid\",                                     cur_family_graph = graph,                                     h2 = 0.5) #> $temp_tbl #> # A tibble: 5 × 3 #>   id     lower upper #>   <chr>  <dbl> <dbl> #> 1 pid_g -Inf   Inf   #> 2 pid   -Inf     0.8 #> 3 mom   -Inf     0.8 #> 4 dad      0.8   0.8 #> 5 pgf      0.7   0.7 #>  #> $covmat #>       pid_g   pid  mom  dad   pgf #> pid_g 0.500 0.500 0.25 0.25 0.125 #> pid   0.500 1.000 0.25 0.25 0.125 #> mom   0.250 0.250 1.00 0.00 0.000 #> dad   0.250 0.250 0.00 1.00 0.250 #> pgf   0.125 0.125 0.00 0.25 1.000 #>"},{"path":"EmilMiP.github.io/LTFHPlus/reference/graph_based_covariance_construction_multi.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructing covariance matrix from local family graph for multi trait analysis — graph_based_covariance_construction_multi","title":"Constructing covariance matrix from local family graph for multi trait analysis — graph_based_covariance_construction_multi","text":"Function constructs genetic covariance matrix given graph around proband extracts threshold information graph.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/graph_based_covariance_construction_multi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructing covariance matrix from local family graph for multi trait analysis — graph_based_covariance_construction_multi","text":"","code":"graph_based_covariance_construction_multi(   fam_id,   pid,   cur_proband_id,   cur_family_graph,   h2_vec,   genetic_corrmat,   phen_names,   add_ind = TRUE )"},{"path":"EmilMiP.github.io/LTFHPlus/reference/graph_based_covariance_construction_multi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructing covariance matrix from local family graph for multi trait analysis — graph_based_covariance_construction_multi","text":"fam_id Name column family ID pid Name column personal ID cur_proband_id id proband cur_family_graph local graph current proband h2_vec vector liability scale heritabilities genetic_corrmat matrix genetic correlations considered phenotypes. Must order h2_vec. phen_names Names phenotypes, given cur_family_graph. add_ind whether add genetic liability proband . Defaults true.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/graph_based_covariance_construction_multi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructing covariance matrix from local family graph for multi trait analysis — graph_based_covariance_construction_multi","text":"list three elements. first element temp_tbl, contains id current proband, family ID lower upper thresholds phenotypes. second element, cov, covariance matrix local graph centred current proband. third element newOrder, order ids pid phen_names pasted together, order can enforced elsewhere .","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/graph_based_covariance_construction_multi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructing covariance matrix from local family graph for multi trait analysis — graph_based_covariance_construction_multi","text":"","code":"fam <- data.frame( fam = c(1, 1, 1,1), id = c(\"pid\", \"mom\", \"dad\", \"pgf\"), dadcol = c(\"dad\", 0, \"pgf\", 0), momcol = c(\"mom\", 0, 0, 0))  thresholds <- data.frame(   id = c(\"pid\", \"mom\", \"dad\", \"pgf\"),   lower_1 = c(-Inf, -Inf, 0.8, 0.7),   upper_1 = c(0.8, 0.8, 0.8, 0.7),   lower_2 = c(-Inf, 0.3, -Inf, 0.2),   upper_2 = c(0.3, 0.3, 0.3, 0.2))  graph <- prepare_graph(fam, icol = \"id\", fcol = \"dadcol\", mcol = \"momcol\", thresholds = thresholds)  ntrait <- 2 genetic_corrmat <- matrix(0.2, ncol = ntrait, nrow = ntrait) diag(genetic_corrmat) <- 1 full_corrmat <- matrix(0.3, ncol = ntrait, nrow = ntrait) diag(full_corrmat) <- 1 h2_vec <- rep(0.6, ntrait)  graph_based_covariance_construction_multi(fam_id = \"fam\",                                           pid = \"id\",                                           cur_proband_id = \"pid\",                                           cur_family_graph = graph,                                           h2_vec = h2_vec,                                           genetic_corrmat = genetic_corrmat,                                           phen_names = c(\"1\", \"2\")) #> $temp_tbl #> # A tibble: 5 × 6 #>   fam   id    lower_1 lower_2 upper_1 upper_2 #>   <chr> <chr>   <dbl>   <dbl>   <dbl>   <dbl> #> 1 pid   pid_g  -Inf    -Inf     Inf     Inf   #> 2 pid   pid    -Inf    -Inf       0.8     0.3 #> 3 pid   mom    -Inf       0.3     0.8     0.3 #> 4 pid   dad       0.8  -Inf       0.8     0.3 #> 5 pid   pgf       0.7     0.2     0.7     0.2 #>  #> $cov #>         pid_g_1 pid_1 mom_1 dad_1 pgf_1 pid_g_2 pid_2 mom_2 dad_2 pgf_2 #> pid_g_1    0.60  0.60  0.30  0.30  0.15    0.12  0.12  0.06  0.06  0.03 #> pid_1      0.60  1.00  0.30  0.30  0.15    0.12  0.12  0.06  0.06  0.03 #> mom_1      0.30  0.30  1.00  0.00  0.00    0.06  0.06  0.12  0.00  0.00 #> dad_1      0.30  0.30  0.00  1.00  0.30    0.06  0.06  0.00  0.12  0.06 #> pgf_1      0.15  0.15  0.00  0.30  1.00    0.03  0.03  0.00  0.06  0.12 #> pid_g_2    0.12  0.12  0.06  0.06  0.03    0.60  0.60  0.30  0.30  0.15 #> pid_2      0.12  0.12  0.06  0.06  0.03    0.60  1.00  0.30  0.30  0.15 #> mom_2      0.06  0.06  0.12  0.00  0.00    0.30  0.30  1.00  0.00  0.00 #> dad_2      0.06  0.06  0.00  0.12  0.06    0.30  0.30  0.00  1.00  0.30 #> pgf_2      0.03  0.03  0.00  0.06  0.12    0.15  0.15  0.00  0.30  1.00 #>  #> $newOrder #>  [1] \"pid_g_1\" \"pid_1\"   \"mom_1\"   \"dad_1\"   \"pgf_1\"   \"pid_g_2\" \"pid_2\"   #>  [8] \"mom_2\"   \"dad_2\"   \"pgf_2\"   #>"},{"path":"EmilMiP.github.io/LTFHPlus/reference/graph_to_trio.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert from igraph to trio information — graph_to_trio","title":"Convert from igraph to trio information — graph_to_trio","text":"function converts igraph object trio information format.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/graph_to_trio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert from igraph to trio information — graph_to_trio","text":"","code":"graph_to_trio(   graph,   id = \"id\",   dadid = \"dadid\",   momid = \"momid\",   sex = \"sex\",   fixParents = TRUE )"},{"path":"EmilMiP.github.io/LTFHPlus/reference/graph_to_trio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert from igraph to trio information — graph_to_trio","text":"graph igraph graph object. id Column proband id. Defaults id. dadid Column father id. Defaults dadid. momid Column mother id. Defaults momid. sex Column sex igraph attributes. Defaults sex. fixParents Logical. TRUE, kinship2's fixParents run trio information returning. Defaults TRUE.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/graph_to_trio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert from igraph to trio information — graph_to_trio","text":"tibble trio information.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/graph_to_trio.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert from igraph to trio information — graph_to_trio","text":"sex column required igraph attributes. sex information used determine mother father trio.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/graph_to_trio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert from igraph to trio information — graph_to_trio","text":"","code":"if (FALSE) {  family = tribble( ~id, ~momcol, ~dadcol, \"pid\", \"mom\", \"dad\", \"sib\", \"mom\", \"dad\", \"mhs\", \"mom\", \"dad2\", \"phs\", \"mom2\", \"dad\", \"mom\", \"mgm\", \"mgf\", \"dad\", \"pgm\", \"pgf\", \"dad2\", \"pgm2\", \"pgf2\", \"paunt\", \"pgm\", \"pgf\", \"pacousin\", \"paunt\", \"pauntH\", \"hspaunt\", \"pgm\", \"newpgf\", \"hspacousin\", \"hspaunt\", \"hspauntH\", \"puncle\", \"pgm\", \"pgf\", \"pucousin\", \"puncleW\", \"puncle\", \"maunt\", \"mgm\", \"mgf\", \"macousin\", \"maunt\", \"mauntH\", \"hsmuncle\", \"newmgm\", \"mgf\", \"hsmucousin\", \"hsmuncleW\", \"hsmuncle\" )   thrs =  tibble(   id = family %>% select(1:3) %>% unlist() %>% unique(),   lower = sample(c(-Inf, 2), size = length(id), replace = TRUE),   upper = sample(c(2, Inf), size = length(id), replace = TRUE),  sex = case_when(    id %in% family$momcol ~ \"F\",     id %in% family$dadcol ~ \"M\",     TRUE ~ NA)) %>%   mutate(sex = sapply(sex, function(x) ifelse(is.na(x),    sample(c(\"M\", \"F\"), 1), x))) graph = LTFHPlus::prepare_graph(.tbl = family,  icol = \"id\", fcol = \"dadcol\", mcol = \"momcol\", thresholds = thrs) }"},{"path":"EmilMiP.github.io/LTFHPlus/reference/LTFHPlus-package.html","id":null,"dir":"Reference","previous_headings":"","what":"LTFHPlus: Implementation of LT-FH++ — LTFHPlus-package","title":"LTFHPlus: Implementation of LT-FH++ — LTFHPlus-package","text":"Implementation LT-FH++, extension liability threshold family history (LT-FH) model. LT-FH++ uses Gibbs sampler sampling truncated multivariate normal distribution allows flexible family structures. LT-FH++ first described Pedersen, Emil M., et al. (2022) https://pure.au.dk/ws/portalfiles/portal/353346245/ extension LT-FH flexible family structures, age-dependent liability threshold (ADuLT) model Pedersen, Emil M., et al. (2023) https://www.nature.com/articles/s41467-023-41210-z alternative traditional time--event genome-wide association studies, family history considered.","code":""},{"path":[]},{"path":"EmilMiP.github.io/LTFHPlus/reference/LTFHPlus-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"LTFHPlus: Implementation of LT-FH++ — LTFHPlus-package","text":"Maintainer: Emil Michael Pedersen emp@ph.au.dk Authors: Florian Privé florian.prive.21@gmail.com [thesis advisor] Jette Steinbach jst@econ.au.dk contributors: Bjarni Jóhann Vilhjálmsson bjv@econ.au.dk [thesis advisor] Esben Agerbo ea@econ.au.dk [thesis advisor] Lucas Rasmussen lar.ncrr@au.dk [contributor]","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/prepare_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct graph from register information — prepare_graph","title":"Construct graph from register information — prepare_graph","text":"prepare_graph constructs graph based mother, father, offspring links.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/prepare_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct graph from register information — prepare_graph","text":"","code":"prepare_graph(   .tbl,   icol,   fcol,   mcol,   thresholds,   lower_col = \"lower\",   upper_col = \"upper\",   missingID_patterns = \"^0$\" )"},{"path":"EmilMiP.github.io/LTFHPlus/reference/prepare_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct graph from register information — prepare_graph","text":".tbl tibble columns icol, fcol, mcol. Additional columns attributes constructed graph. icol column name column proband ids. fcol column name column father ids. mcol column name column mother ids. thresholds tibble icol, lower_col upper_col. Used assign lower upper thresholds individuals graph attributes. lower_col Column name column proband's lower threshold. upper_col Column name column proband's upper threshold. missingID_patterns string missing values ID columns. Multiple values can used, must separated \"|\". Defaults \"^0$\".","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/prepare_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct graph from register information — prepare_graph","text":"igraph object. (directed) graph object based links provided .tbl lower upper thresholds stored attributes.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/prepare_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct graph from register information — prepare_graph","text":"","code":"fam <- data.frame(   id = c(\"pid\", \"mom\", \"dad\", \"pgf\"),   dadcol = c(\"dad\", 0, \"pgf\", 0),   momcol = c(\"mom\", 0, 0, 0))  thresholds <- data.frame(   id = c(\"pid\", \"mom\", \"dad\", \"pgf\"),   lower = c(-Inf, -Inf, 0.8, 0.7),   upper = c(0.8, 0.8, 0.8, 0.7))  prepare_graph(fam, icol = \"id\", fcol = \"dadcol\", mcol = \"momcol\", thresholds = thresholds) #> IGRAPH f7cc1e2 DN-- 4 3 --  #> + attr: name (v/c), lower (v/n), upper (v/n) #> + edges from f7cc1e2 (vertex names): #> [1] dad->pid mom->pid pgf->dad"},{"path":"EmilMiP.github.io/LTFHPlus/reference/prepare_LTFHPlus_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepares input for estimate_liability — prepare_LTFHPlus_input","title":"Prepares input for estimate_liability — prepare_LTFHPlus_input","text":"Prepares input estimate_liability","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/prepare_LTFHPlus_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepares input for estimate_liability — prepare_LTFHPlus_input","text":"","code":"prepare_LTFHPlus_input(   .tbl,   CIP,   age_col,   aoo_col,   CIP_merge_columns = c(\"sex\", \"birth_year\", \"age\"),   CIP_cip_col = \"cip\",   status_col = \"status\",   use_fixed_case_thr = FALSE,   fam_id_col = \"fam_id\",   personal_id_col = \"pid\",   interpolation = NULL,   bst.params = list(max_depth = 10, base_score = 0, nthread = 4, min_child_weight = 10),   min_CIP_value = 1e-05,   xgboost_itr = 50 )"},{"path":"EmilMiP.github.io/LTFHPlus/reference/prepare_LTFHPlus_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepares input for estimate_liability — prepare_LTFHPlus_input","text":".tbl contains family personal ids role family. CIP tibble population representative cumulative incidence proportions. CIP values merged CIP_columns. age_col name column age aoo_col name column age onset CIP_merge_columns columns CIPs subset , e.g. CIPs birth_year, sex. CIP_cip_col name column CIP values status_col Column contains status family member use_fixed_case_thr threshold fixed cases? Can used CIPs detailed, e.g. stratified birth_year sex. fam_id_col Column contains family ID personal_id_col Column contains personal ID interpolation type interpolation, defaults NULL. bst.params list parameters pass xgboost min_CIP_value minimum cip value allow, low values may lead numerical instabilities. xgboost_itr Number iterations run xgboost .","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/prepare_LTFHPlus_input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepares input for estimate_liability — prepare_LTFHPlus_input","text":"tibble formatted estimate_liability","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/prepare_LTFHPlus_input.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepares input for estimate_liability — prepare_LTFHPlus_input","text":"","code":"tbl = data.frame(   fam_id = c(1, 1, 1, 1),   pid = c(1, 2, 3, 4),   role = c(\"o\", \"m\", \"f\", \"pgf\"),   sex = c(1, 0, 1, 1),   status = c(0, 0, 1, 1),   age = c(22, 42, 48, 78),   birth_year = 2023 - c(22, 42, 48, 78),   aoo = c(NA, NA, 43, 45))  cip = data.frame(   age = c(22, 42, 43, 45, 48, 78),   birth_year = c(2001, 1981, 1975, 1945, 1975, 1945),   sex = c(1, 0, 1, 1, 1, 1),   cip = c(0.1, 0.2, 0.3, 0.3, 0.3, 0.4))  prepare_LTFHPlus_input(.tbl = tbl,                        CIP = cip,                         age_col = \"age\",                        aoo_col = \"aoo\",                        interpolation = NA) #>   fam_id pid role sex status age birth_year aoo cip       thr     lower #> 1      1   1    o   1      0  22       2001  NA 0.1 1.2815516      -Inf #> 2      1   2    m   0      0  42       1981  NA 0.2 0.8416212      -Inf #> 3      1   3    f   1      1  43       1975  43 0.3 0.5244005 0.5244005 #> 4      1   4  pgf   1      1  45       1945  45 0.3 0.5244005 0.5244005 #>       upper #> 1 1.2815516 #> 2 0.8416212 #> 3       Inf #> 4       Inf"},{"path":"EmilMiP.github.io/LTFHPlus/reference/rtmvnorm.gibbs.html","id":null,"dir":"Reference","previous_headings":"","what":"Gibbs Sampler for the truncated multivariate normal distribution — rtmvnorm.gibbs","title":"Gibbs Sampler for the truncated multivariate normal distribution — rtmvnorm.gibbs","text":"rtmvnorm.gibbs implements Gibbs sampler truncated multivariate normal distribution covariance matrix covmat.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/rtmvnorm.gibbs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gibbs Sampler for the truncated multivariate normal distribution — rtmvnorm.gibbs","text":"","code":"rtmvnorm.gibbs(   n_sim = 1e+05,   covmat,   lower = -Inf,   upper,   fixed = (lower == upper),   out = c(1),   burn_in = 1000 )"},{"path":"EmilMiP.github.io/LTFHPlus/reference/rtmvnorm.gibbs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gibbs Sampler for the truncated multivariate normal distribution — rtmvnorm.gibbs","text":"n_sim positive number representing number draws Gibbs sampler burn-.. Defaults 1e+05. covmat symmetric numeric matrix representing covariance matrix multivariate normal distribution. lower number numeric vector representing lower cutoff point(s) truncated normal distribution. length lower must 1 equal dimension multivariable normal distribution. Defaults -Inf. upper number numeric vector representing upper cutoff point(s) truncated normal distribution. Must greater equal lower. addition length upper must 1 equal dimension multivariable normal distribution. Defaults Inf. fixed logical scalar logical vector indicating variables fix. fixed vector, must length lower upper. Defaults TRUE lower equal upper FALSE otherwise. integer numeric vector indicating variables returned Gibbs sampler. = c(1), first variable (usually genetic component full liability first phenotype) estimated returned. = c(2), second variable (usually full liability) estimated returned. = c(1,2), first second variable estimated returned. Defaults c(1). burn_in number iterations count burn Gibbs sampler. Must non-negative. Defaults 1000.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/rtmvnorm.gibbs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gibbs Sampler for the truncated multivariate normal distribution — rtmvnorm.gibbs","text":"covmat symmetric numeric matrix, n_sim burn_in positive/non-negative numbers, numeric vector lower, upper fixed numbers vectors length required format, rtmvnorm.gibbs returns sampling values Gibbs sampler variables specified .","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/rtmvnorm.gibbs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gibbs Sampler for the truncated multivariate normal distribution — rtmvnorm.gibbs","text":"Given covariance matrix covmat lower upper cutoff points, function rtmvnorm.gibbs() can used perform Gibbs sampler truncated multivariable normal distribution. possible specify variables return Gibbs sampler, making convenient use estimating full liability genetic component full liability.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/rtmvnorm.gibbs.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Gibbs Sampler for the truncated multivariate normal distribution — rtmvnorm.gibbs","text":"Kotecha, J. H., & Djuric, P. M. (1999, March). Gibbs sampling approach generation truncated multivariate gaussian random variables. 1999 IEEE International Conference Acoustics, Speech, Signal Processing. Proceedings. ICASSP99 (Cat. . 99CH36258) (Vol. 3, pp. 1757-1760). IEEE. doi:10.1109/ICASSP.1999.756335 Wilhelm, S., & Manjunath, B. G. (2010). tmvtnorm: package truncated multivariate normal distribution. R Journal. doi:10.32614/RJ-2010-005","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/rtmvnorm.gibbs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gibbs Sampler for the truncated multivariate normal distribution — rtmvnorm.gibbs","text":"","code":"samp <- rtmvnorm.gibbs(10e3, covmat = matrix(c(1, 0.2, 0.2, 0.5), 2),                        lower = c(-Inf, 0), upper = c(0, Inf), out = 1:2)"},{"path":"EmilMiP.github.io/LTFHPlus/reference/simulate_under_LTM.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate under the liability threshold model. — simulate_under_LTM","title":"Simulate under the liability threshold model. — simulate_under_LTM","text":"simulate_under_LTM simulates families thresholds liability threshold model given family structure variable number phenotypes.Please note possible simulate different family structures.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/simulate_under_LTM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate under the liability threshold model. — simulate_under_LTM","text":"","code":"simulate_under_LTM(   fam_vec = c(\"m\", \"f\", \"s1\", \"mgm\", \"mgf\", \"pgm\", \"pgf\"),   n_fam = NULL,   add_ind = TRUE,   h2 = 0.5,   genetic_corrmat = NULL,   full_corrmat = NULL,   phen_names = NULL,   n_sim = 1000,   pop_prev = 0.1 )"},{"path":"EmilMiP.github.io/LTFHPlus/reference/simulate_under_LTM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate under the liability threshold model. — simulate_under_LTM","text":"fam_vec vector strings holding different family members. family members must represented strings following list: m (Mother) f (Father) c[0-9]*.[0-9]* (Children) mgm (Maternal grandmother) mgf (Maternal grandfather) pgm (Paternal grandmother) pgf (Paternal grandfather) s[0-9]* (Full siblings) mhs[0-9]* (Half-siblings - maternal side) phs[0-9]* (Half-siblings - paternal side) mau[0-9]* (Aunts/Uncles - maternal side) pau[0-9]* (Aunts/Uncles - paternal side). Defaults c(\"m\",\"f\",\"s1\",\"mgm\",\"mgf\",\"pgm\",\"pgf\"). n_fam named vector holding desired number family members. See  setNames. names must picked list mentioned . Defaults NULL. add_ind logical scalar indicating whether genetic component full liability well full liability underlying target individual included covariance matrix. Defaults TRUE. h2 Either number numeric vector holding liability-scale heritability(ies) one phenotypes. entries h2 must non-negative. Note liability threshold model, heritabilities must also 1. Defaults 0.5. genetic_corrmat Either NULL numeric matrix holding genetic correlations desired phenotypes. Must specified, length(h2)\\(>0\\), ignored h2 number. diagonal entries genetic_corrmat must equal one, -diagonal entries must -1 1. addition, matrix must symmetric. Defaults NULL. full_corrmat Either NULL numeric matrix holding full correlations desired phenotypes. Must specified, length(h2)\\(>0\\), ignored h2 number. diagonal entries full_corrmat must equal one, -diagonal entries must -1 1. addition, matrix must symmetric. Defaults NULL. phen_names Either NULL character vector holding phenotype names. names used create row column names covariance matrix. Must specified, length(h2) \\(> 0\\), ignored h2 number. specified, names default phenotype1, phenotype2, etc. Defaults NULL. n_sim positive number representing number simulations. Defaults 1000. pop_prev Either number numeric vector holding population prevalence(s), .e. overall prevalence(s) population. entries pop_prev must positive smaller 1. Defaults 0.1.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/simulate_under_LTM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate under the liability threshold model. — simulate_under_LTM","text":"either fam_vec n_fam used argument, required format, liability-scale heritability h2 number satisfying \\(0 \\leq h^2\\), n_sim strictly positive number, pop_prev positive number one, output list containing two tibbles. first tibble, sim_obs, holds simulated liabilities, disease status current age/age--onset family members n_sim families. second tibble, thresholds, holds family identifier, personal identifier, role (specified fam_vec n_fam) well lower upper thresholds individuals families. Note tibble format required estimate_liability. either fam_vec n_fam used argument required format, genetic_corrmat full_corrmat two numeric symmetric matrices satisfying diagonal entries one -diagonal entries -1 1, liability-scale heritabilities h2_vec numbers satisfying \\(0 \\leq h^2_i\\) \\(\\\\{1,...,n_pheno\\}\\), n_sim strictly positive number, pop_prev positive numeric vector entries one, output list containing following lists. first outer list, named first phenotype phen_names, holds tibble sim_obs, holds simulated liabilities, disease status current age/age--onset family members n_sim families first phenotype. first outer list, second outer list, named second phenotype phen_names, holds tibble sim_obs, holds  simulated liabilities, disease status current age/age--onset family members n_sim families second phenotype. list containing sim_obs phenotype phen_names. last list entry, thresholds, holds family identifier, personal identifier, role (specified fam_vec n_fam) well lower upper thresholds individuals families phenotypes. Note tibble format required estimate_liability. Finally, note neither fam_vec n_fam specified, function returns disease status, current age/age--onset, lower upper thresholds, well personal identifier single individual, namely individual consideration (called o). fam_vec n_fam defined, user asked ' decide two vectors use.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/simulate_under_LTM.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate under the liability threshold model. — simulate_under_LTM","text":"function can used simulate case-control status, current age age--onset well lower upper thresholds variable number phenotypes family members n_sim families. h2 number, simulate_under_LTM simulates case- control status, current age age--onset well thresholds single phenotype. However, h2 numeric vector, genetic_corrmat full_corrmat two symmetric correlation matrices, phen_names pop_prev numeric vectors holding phenotype names population prevalences, respectively, simulate_under_LTM simulates case-control status, current age age--onset well thresholds two (correlated) phenotypes. family members can specified using one two possible formats.","code":""},{"path":[]},{"path":"EmilMiP.github.io/LTFHPlus/reference/simulate_under_LTM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate under the liability threshold model. — simulate_under_LTM","text":"","code":"simulate_under_LTM() #> $sim_obs #> # A tibble: 1,000 × 26 #>    fam_ID        g      o      m       f     s1     mgm     mgf      pgm     pgf #>    <chr>     <dbl>  <dbl>  <dbl>   <dbl>  <dbl>   <dbl>   <dbl>    <dbl>   <dbl> #>  1 fam_ID…  1.37    2.47  -0.183  0.229  -0.631 -0.995  -0.341  -0.363    0.229  #>  2 fam_ID…  1.03    1.25   1.13   2.69    1.37  -0.425  -0.630   0.0554   0.456  #>  3 fam_ID…  1.33    1.06   0.620 -0.656   1.81  -0.943   0.975  -0.335    1.64   #>  4 fam_ID… -1.40   -0.564 -1.09  -1.76   -3.10  -0.871   0.158  -1.16    -0.635  #>  5 fam_ID… -0.915  -1.11  -0.458  0.0783 -0.845 -0.295   0.529  -1.02     0.396  #>  6 fam_ID…  1.07    0.921  1.34   1.07    2.16   1.47    0.352   0.401    0.0716 #>  7 fam_ID…  0.579  -0.386 -1.12   1.05    1.41  -0.0144  0.0586 -0.00135 -0.986  #>  8 fam_ID…  0.105  -1.27  -0.231 -0.599   0.381  0.855   2.41   -0.759   -0.848  #>  9 fam_ID… -0.0266  1.30  -0.954  1.05   -1.15  -1.07   -1.41    0.0881  -0.283  #> 10 fam_ID…  0.567   0.447  0.361  0.463  -1.00   1.23    2.17    0.870    0.335  #> # ℹ 990 more rows #> # ℹ 16 more variables: o_status <lgl>, m_status <lgl>, f_status <lgl>, #> #   s1_status <lgl>, mgm_status <lgl>, mgf_status <lgl>, pgm_status <lgl>, #> #   pgf_status <lgl>, o_aoo <dbl>, m_aoo <dbl>, f_aoo <dbl>, s1_aoo <dbl>, #> #   mgm_aoo <dbl>, mgf_aoo <dbl>, pgm_aoo <dbl>, pgf_aoo <dbl> #>  #> $thresholds #> # A tibble: 8,000 × 5 #>    fam_ID    indiv_ID    role    lower upper #>    <chr>     <chr>       <chr>   <dbl> <dbl> #>  1 fam_ID_1  fam_ID_1_1  o        2.47  2.47 #>  2 fam_ID_2  fam_ID_2_1  o     -Inf     3.42 #>  3 fam_ID_3  fam_ID_3_1  o     -Inf     3.48 #>  4 fam_ID_4  fam_ID_4_1  o     -Inf     3.35 #>  5 fam_ID_5  fam_ID_5_1  o     -Inf     2.83 #>  6 fam_ID_6  fam_ID_6_1  o     -Inf     3.28 #>  7 fam_ID_7  fam_ID_7_1  o     -Inf     3.52 #>  8 fam_ID_8  fam_ID_8_1  o     -Inf     2.51 #>  9 fam_ID_9  fam_ID_9_1  o        1.30  1.30 #> 10 fam_ID_10 fam_ID_10_1 o     -Inf     3.28 #> # ℹ 7,990 more rows #>   genetic_corrmat <- matrix(0.4, 3, 3) diag(genetic_corrmat) <- 1 full_corrmat <- matrix(0.6, 3, 3) diag(full_corrmat) <- 1  simulate_under_LTM(fam_vec = NULL, n_fam = stats::setNames(c(1,1,1,2,2),  c(\"m\",\"mgm\",\"mgf\",\"s\",\"mhs\"))) #> $sim_obs #> # A tibble: 1,000 × 26 #>    fam_ID        g       o       m    mgm     mgf       s1      s2   mhs1   mhs2 #>    <chr>     <dbl>   <dbl>   <dbl>  <dbl>   <dbl>    <dbl>   <dbl>  <dbl>  <dbl> #>  1 fam_ID…  0.157   0.329   0.480  -0.843 -0.496  -0.186   -0.0217 -0.439 -0.507 #>  2 fam_ID… -1.56   -1.24   -1.71   -0.222 -1.46   -0.478    0.175  -1.23   0.176 #>  3 fam_ID… -0.384  -0.0760 -1.77   -1.10  -1.15   -1.59    -0.910  -0.531 -0.386 #>  4 fam_ID…  0.513   0.187  -0.0519  0.292 -0.772   1.40     0.868  -1.20   0.507 #>  5 fam_ID… -1.29   -1.91   -2.06   -1.14   0.0605  0.00188 -0.841  -0.475 -2.38  #>  6 fam_ID… -0.0984 -0.642  -0.802   1.44  -2.50   -1.07     0.933   0.399 -2.62  #>  7 fam_ID… -2.20   -1.99   -1.54   -0.535 -0.358  -1.94    -2.01   -2.52  -1.31  #>  8 fam_ID… -0.323  -0.311  -1.40   -0.208 -0.146  -0.827    1.02   -0.537 -1.07  #>  9 fam_ID…  0.483   3.10    1.20   -0.364 -0.805   0.350    0.550  -0.420  0.235 #> 10 fam_ID… -0.503  -1.27    0.730   1.66   1.91   -0.120   -0.352   0.926  0.465 #> # ℹ 990 more rows #> # ℹ 16 more variables: o_status <lgl>, m_status <lgl>, mgm_status <lgl>, #> #   mgf_status <lgl>, s1_status <lgl>, s2_status <lgl>, mhs1_status <lgl>, #> #   mhs2_status <lgl>, o_aoo <dbl>, m_aoo <dbl>, mgm_aoo <dbl>, mgf_aoo <dbl>, #> #   s1_aoo <dbl>, s2_aoo <dbl>, mhs1_aoo <dbl>, mhs2_aoo <dbl> #>  #> $thresholds #> # A tibble: 8,000 × 5 #>    fam_ID    indiv_ID    role    lower upper #>    <chr>     <chr>       <chr>   <dbl> <dbl> #>  1 fam_ID_1  fam_ID_1_1  o     -Inf     3.35 #>  2 fam_ID_2  fam_ID_2_1  o     -Inf     2.59 #>  3 fam_ID_3  fam_ID_3_1  o     -Inf     3.42 #>  4 fam_ID_4  fam_ID_4_1  o     -Inf     3.52 #>  5 fam_ID_5  fam_ID_5_1  o     -Inf     2.87 #>  6 fam_ID_6  fam_ID_6_1  o     -Inf     2.87 #>  7 fam_ID_7  fam_ID_7_1  o     -Inf     2.95 #>  8 fam_ID_8  fam_ID_8_1  o     -Inf     2.59 #>  9 fam_ID_9  fam_ID_9_1  o        3.10  3.10 #> 10 fam_ID_10 fam_ID_10_1 o     -Inf     3.10 #> # ℹ 7,990 more rows #>   simulate_under_LTM(fam_vec = c(\"m\",\"f\",\"s1\"), n_fam = NULL, add_ind = FALSE,  genetic_corrmat = genetic_corrmat, full_corrmat = full_corrmat, n_sim = 200) #> $sim_obs #> # A tibble: 200 × 10 #>    fam_ID        m      f      s1 m_status f_status s1_status m_aoo f_aoo s1_aoo #>    <chr>     <dbl>  <dbl>   <dbl> <lgl>    <lgl>    <lgl>     <dbl> <dbl>  <dbl> #>  1 fam_ID_1 -1.80  -0.155 -0.625  FALSE    FALSE    FALSE        49    55     26 #>  2 fam_ID_2 -0.384  0.272 -1.45   FALSE    FALSE    FALSE        46    45     26 #>  3 fam_ID_3 -0.571 -1.07  -0.979  FALSE    FALSE    FALSE        52    46     22 #>  4 fam_ID_4  1.31  -0.456 -0.0634 TRUE     FALSE    FALSE        83    46     18 #>  5 fam_ID_5  0.326  0.155 -0.851  FALSE    FALSE    FALSE        62    55     37 #>  6 fam_ID_6  0.322  0.812  0.264  FALSE    FALSE    FALSE        53    64     35 #>  7 fam_ID_7  1.40   1.31   1.55   TRUE     TRUE     TRUE         71    83     63 #>  8 fam_ID_8  1.22   0.179  0.606  FALSE    FALSE    FALSE        44    39     16 #>  9 fam_ID_9  0.314  1.20   1.79   FALSE    FALSE    TRUE         39    41     56 #> 10 fam_ID_… -1.05  -0.354 -0.909  FALSE    FALSE    FALSE        39    38     14 #> # ℹ 190 more rows #>  #> $thresholds #> # A tibble: 600 × 5 #>    fam_ID    indiv_ID    role    lower upper #>    <chr>     <chr>       <chr>   <dbl> <dbl> #>  1 fam_ID_1  fam_ID_1_1  m     -Inf     2.05 #>  2 fam_ID_2  fam_ID_2_1  m     -Inf     2.18 #>  3 fam_ID_3  fam_ID_3_1  m     -Inf     1.93 #>  4 fam_ID_4  fam_ID_4_1  m        1.31  1.31 #>  5 fam_ID_5  fam_ID_5_1  m     -Inf     1.59 #>  6 fam_ID_6  fam_ID_6_1  m     -Inf     1.89 #>  7 fam_ID_7  fam_ID_7_1  m        1.41  1.41 #>  8 fam_ID_8  fam_ID_8_1  m     -Inf     2.26 #>  9 fam_ID_9  fam_ID_9_1  m     -Inf     2.47 #> 10 fam_ID_10 fam_ID_10_1 m     -Inf     2.47 #> # ℹ 590 more rows #>   simulate_under_LTM(fam_vec = c(), n_fam = NULL, add_ind = TRUE, h2 = 0.5,  n_sim = 200, pop_prev = 0.05) #> Warning: Neither fam_vec nor n_fam is specified... #> $sim_obs #> # A tibble: 200 × 5 #>    fam_ID         g       o o_status o_aoo #>    <chr>      <dbl>   <dbl> <lgl>    <dbl> #>  1 fam_ID_1   0.727  1.12   FALSE       25 #>  2 fam_ID_2   1.07   2.42   TRUE        46 #>  3 fam_ID_3   1.71   1.31   FALSE       39 #>  4 fam_ID_4  -0.257  0.388  FALSE       27 #>  5 fam_ID_5  -1.17  -1.66   FALSE       13 #>  6 fam_ID_6  -0.639 -0.0206 FALSE       15 #>  7 fam_ID_7   0.315  0.115  FALSE       10 #>  8 fam_ID_8  -0.397 -0.277  FALSE       24 #>  9 fam_ID_9   0.556  0.633  FALSE       39 #> 10 fam_ID_10  0.932  1.77   TRUE        69 #> # ℹ 190 more rows #>  #> $thresholds #> # A tibble: 200 × 5 #>    fam_ID    indiv_ID    role    lower upper #>    <chr>     <chr>       <chr>   <dbl> <dbl> #>  1 fam_ID_1  fam_ID_1_1  o     -Inf     3.23 #>  2 fam_ID_2  fam_ID_2_1  o        2.44  2.44 #>  3 fam_ID_3  fam_ID_3_1  o     -Inf     2.71 #>  4 fam_ID_4  fam_ID_4_1  o     -Inf     3.16 #>  5 fam_ID_5  fam_ID_5_1  o     -Inf     3.63 #>  6 fam_ID_6  fam_ID_6_1  o     -Inf     3.57 #>  7 fam_ID_7  fam_ID_7_1  o     -Inf     3.73 #>  8 fam_ID_8  fam_ID_8_1  o     -Inf     3.26 #>  9 fam_ID_9  fam_ID_9_1  o     -Inf     2.71 #> 10 fam_ID_10 fam_ID_10_1 o        1.78  1.78 #> # ℹ 190 more rows #>"},{"path":"EmilMiP.github.io/LTFHPlus/reference/simulate_under_LTM_multi.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate under the liability threshold model (multiple phenotypes). — simulate_under_LTM_multi","title":"Simulate under the liability threshold model (multiple phenotypes). — simulate_under_LTM_multi","text":"simulate_under_LTM_multi simulates families thresholds liability threshold model given family structure multiple phenotypes. Please note possible simulate different family structures.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/simulate_under_LTM_multi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate under the liability threshold model (multiple phenotypes). — simulate_under_LTM_multi","text":"","code":"simulate_under_LTM_multi(   fam_vec = c(\"m\", \"f\", \"s1\", \"mgm\", \"mgf\", \"pgm\", \"pgf\"),   n_fam = NULL,   add_ind = TRUE,   genetic_corrmat = diag(3),   full_corrmat = diag(3),   h2_vec = rep(0.5, 3),   phen_names = NULL,   n_sim = 1000,   pop_prev = rep(0.1, 3) )"},{"path":"EmilMiP.github.io/LTFHPlus/reference/simulate_under_LTM_multi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate under the liability threshold model (multiple phenotypes). — simulate_under_LTM_multi","text":"fam_vec vector strings holding different family members. family members must represented strings following list: m (Mother) f (Father) c[0-9]*.[0-9]* (Children) mgm (Maternal grandmother) mgf (Maternal grandfather) pgm (Paternal grandmother) pgf (Paternal grandfather) s[0-9]* (Full siblings) mhs[0-9]* (Half-siblings - maternal side) phs[0-9]* (Half-siblings - paternal side) mau[0-9]* (Aunts/Uncles - maternal side) pau[0-9]* (Aunts/Uncles - paternal side). Defaults c(\"m\",\"f\",\"s1\",\"mgm\",\"mgf\",\"pgm\",\"pgf\"). n_fam named vector holding desired number family members. See  setNames. names must picked list mentioned . Defaults NULL. add_ind logical scalar indicating whether genetic component full liability well full liability underlying target individual included covariance matrix. Defaults TRUE. genetic_corrmat numeric matrix holding genetic correlations desired phenotypes. diagonal entries must equal one, -diagonal entries must -1 1. addition, matrix must symmetric. Defaults diag(3). full_corrmat numeric matrix holding full correlations desired phenotypes. diagonal entries must equal one, -diagonal entries must -1 1. addition, matrix must symmetric. Defaults diag(3). h2_vec numeric vector holding liability-scale heritabilities number phenotype. entries must non-negative. Note liability threshold model, heritabilities must also 1. Defaults rep(0.5,3). phen_names character vector holding phenotype names. names used create row column names covariance matrix. specified, names default phenotype1, phenotype2, etc. Defaults NULL. n_sim positive number representing number simulations. Defaults 1000. pop_prev numeric vector holding population prevalences, .e. overall prevalences population. entries pop_prev must positive smaller 1. Defaults rep(.1,3).","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/simulate_under_LTM_multi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate under the liability threshold model (multiple phenotypes). — simulate_under_LTM_multi","text":"either fam_vec n_fam used argument required format, genetic_corrmat full_corrmat two numeric symmetric matrices satisfying diagonal entries one -diagonal entries -1 1, liability-scale heritabilities h2_vec numbers satisfying \\(0 \\leq h^2_i\\) \\(\\\\{1,...,n_pheno\\}\\), n_sim strictly positive number, pop_prev positive numeric vector entries one, output list containing lists phenotype. first outer list, named first phenotype phen_names, holds tibble sim_obs, holds simulated liabilities, disease status current age/age--onset family members n_sim families first phenotype. first outer list, second outer list, named second phenotype phen_names, holds tibble sim_obs, holds  simulated liabilities, disease status current age/age--onset family members n_sim families second phenotype. list containing sim_obs phenotype phen_names. last list entry, thresholds, holds family identifier, personal identifier, role (specified fam_vec n_fam) well lower upper thresholds individuals families phenotypes. Note tibble format required estimate_liability. Finally, note neither fam_vec n_fam specified, function returns disease status, current age/age--onset, lower upper thresholds, well personal identifier single individual, namely individual consideration (called o). fam_vec n_fam defined, user asked ' decide two vectors use.","code":""},{"path":[]},{"path":"EmilMiP.github.io/LTFHPlus/reference/simulate_under_LTM_multi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate under the liability threshold model (multiple phenotypes). — simulate_under_LTM_multi","text":"","code":"simulate_under_LTM_multi() #> $phenotype1 #> $phenotype1$sim_obs #> # A tibble: 1,000 × 26 #>    fam_ID    g_phenotype1 o_phenotype1 m_phenotype1 f_phenotype1 s1_phenotype1 #>    <chr>            <dbl>        <dbl>        <dbl>        <dbl>         <dbl> #>  1 fam_ID_1        0.959        1.34         1.38          0.820         2.04  #>  2 fam_ID_2        1.46         2.33        -0.548         1.43          2.03  #>  3 fam_ID_3       -0.573        0.0225      -0.481         1.46         -0.288 #>  4 fam_ID_4       -0.104       -0.343        0.848        -0.355         0.226 #>  5 fam_ID_5        0.603       -0.165        0.287        -0.640        -1.40  #>  6 fam_ID_6        0.538        0.910        0.830        -1.45          0.693 #>  7 fam_ID_7       -0.0690      -0.425       -0.0800        0.844         0.250 #>  8 fam_ID_8       -0.175        0.131       -0.885        -0.675        -0.207 #>  9 fam_ID_9       -0.718       -0.706       -0.377         0.495        -0.166 #> 10 fam_ID_10       0.379        0.373        0.978        -0.412         0.384 #> # ℹ 990 more rows #> # ℹ 20 more variables: mgm_phenotype1 <dbl>, mgf_phenotype1 <dbl>, #> #   pgm_phenotype1 <dbl>, pgf_phenotype1 <dbl>, o_phenotype1_status <lgl>, #> #   m_phenotype1_status <lgl>, f_phenotype1_status <lgl>, #> #   s1_phenotype1_status <lgl>, mgm_phenotype1_status <lgl>, #> #   mgf_phenotype1_status <lgl>, pgm_phenotype1_status <lgl>, #> #   pgf_phenotype1_status <lgl>, o_phenotype1_aoo <dbl>, … #>  #>  #> $phenotype2 #> $phenotype2$sim_obs #> # A tibble: 1,000 × 26 #>    fam_ID    g_phenotype2 o_phenotype2 m_phenotype2 f_phenotype2 s1_phenotype2 #>    <chr>            <dbl>        <dbl>        <dbl>        <dbl>         <dbl> #>  1 fam_ID_1        -1.43      -0.746        -1.10        -0.444         -1.49  #>  2 fam_ID_2        -0.428     -1.34         -0.0952      -0.791          1.40  #>  3 fam_ID_3        -0.301     -0.645         1.71        -1.28           0.258 #>  4 fam_ID_4        -1.11      -2.16         -0.869       -2.03          -1.93  #>  5 fam_ID_5         0.424      1.10          0.922        0.871         -0.895 #>  6 fam_ID_6         0.114     -1.16          1.10        -1.62          -0.263 #>  7 fam_ID_7         0.993      1.45          1.31         0.0951        -0.787 #>  8 fam_ID_8         0.434      1.04         -0.585        2.83           1.05  #>  9 fam_ID_9        -0.174     -0.00258      -1.58        -1.02          -0.461 #> 10 fam_ID_10        0.424      0.970         1.06        -0.963          1.69  #> # ℹ 990 more rows #> # ℹ 20 more variables: mgm_phenotype2 <dbl>, mgf_phenotype2 <dbl>, #> #   pgm_phenotype2 <dbl>, pgf_phenotype2 <dbl>, o_phenotype2_status <lgl>, #> #   m_phenotype2_status <lgl>, f_phenotype2_status <lgl>, #> #   s1_phenotype2_status <lgl>, mgm_phenotype2_status <lgl>, #> #   mgf_phenotype2_status <lgl>, pgm_phenotype2_status <lgl>, #> #   pgf_phenotype2_status <lgl>, o_phenotype2_aoo <dbl>, … #>  #>  #> $phenotype3 #> $phenotype3$sim_obs #> # A tibble: 1,000 × 26 #>    fam_ID    g_phenotype3 o_phenotype3 m_phenotype3 f_phenotype3 s1_phenotype3 #>    <chr>            <dbl>        <dbl>        <dbl>        <dbl>         <dbl> #>  1 fam_ID_1       -0.0725     -1.13          -0.784       -0.972        0.0342 #>  2 fam_ID_2        0.313       0.00468        0.990       -1.18         0.570  #>  3 fam_ID_3       -0.510      -0.928          0.570       -0.349       -0.0342 #>  4 fam_ID_4        0.0908     -0.0394         1.63         0.305        2.16   #>  5 fam_ID_5       -0.941      -1.83           0.512        0.956       -0.377  #>  6 fam_ID_6       -0.980      -0.356         -1.78        -0.548       -1.06   #>  7 fam_ID_7       -0.723      -0.798         -1.35        -0.793       -0.999  #>  8 fam_ID_8       -0.475      -1.20           0.422       -1.64         0.597  #>  9 fam_ID_9        0.655      -0.592          1.30        -1.26        -0.836  #> 10 fam_ID_10      -1.02       -0.0343         0.926       -0.677       -0.893  #> # ℹ 990 more rows #> # ℹ 20 more variables: mgm_phenotype3 <dbl>, mgf_phenotype3 <dbl>, #> #   pgm_phenotype3 <dbl>, pgf_phenotype3 <dbl>, o_phenotype3_status <lgl>, #> #   m_phenotype3_status <lgl>, f_phenotype3_status <lgl>, #> #   s1_phenotype3_status <lgl>, mgm_phenotype3_status <lgl>, #> #   mgf_phenotype3_status <lgl>, pgm_phenotype3_status <lgl>, #> #   pgf_phenotype3_status <lgl>, o_phenotype3_aoo <dbl>, … #>  #>  #> $thresholds #> # A tibble: 8,000 × 9 #>    fam_ID    indiv_ID   role  lower_phenotype1 upper_phenotype1 lower_phenotype2 #>    <chr>     <chr>      <chr>            <dbl>            <dbl>            <dbl> #>  1 fam_ID_1  fam_ID_1_1 o                 1.34             1.34          -Inf    #>  2 fam_ID_2  fam_ID_2_1 o                 2.34             2.34          -Inf    #>  3 fam_ID_3  fam_ID_3_1 o              -Inf                2.72          -Inf    #>  4 fam_ID_4  fam_ID_4_1 o              -Inf                3.21          -Inf    #>  5 fam_ID_5  fam_ID_5_1 o              -Inf                2.99          -Inf    #>  6 fam_ID_6  fam_ID_6_1 o              -Inf                2.59          -Inf    #>  7 fam_ID_7  fam_ID_7_1 o              -Inf                3.21             1.45 #>  8 fam_ID_8  fam_ID_8_1 o              -Inf                2.95          -Inf    #>  9 fam_ID_9  fam_ID_9_1 o              -Inf                2.43          -Inf    #> 10 fam_ID_10 fam_ID_10… o              -Inf                2.79          -Inf    #> # ℹ 7,990 more rows #> # ℹ 3 more variables: upper_phenotype2 <dbl>, lower_phenotype3 <dbl>, #> #   upper_phenotype3 <dbl> #>   genetic_corrmat <- matrix(0.4, 3, 3) diag(genetic_corrmat) <- 1 full_corrmat <- matrix(0.6, 3, 3) diag(full_corrmat) <- 1  simulate_under_LTM_multi(fam_vec = NULL, n_fam = stats::setNames(c(1,1,1,2,2),  c(\"m\",\"mgm\",\"mgf\",\"s\",\"mhs\"))) #> $phenotype1 #> $phenotype1$sim_obs #> # A tibble: 1,000 × 26 #>    fam_ID   g_phenotype1 o_phenotype1 m_phenotype1 mgm_phenotype1 mgf_phenotype1 #>    <chr>           <dbl>        <dbl>        <dbl>          <dbl>          <dbl> #>  1 fam_ID_1       0.364         1.27         0.731         0.919          -0.485 #>  2 fam_ID_2      -1.04         -1.87        -1.70         -0.353          -0.990 #>  3 fam_ID_3      -0.634        -1.41        -0.667        -0.892          -1.71  #>  4 fam_ID_4      -0.216         0.203       -0.102        -0.195           0.679 #>  5 fam_ID_5       0.0215       -0.109       -0.187        -0.465           0.611 #>  6 fam_ID_6       0.477        -0.552       -0.365         1.49            0.318 #>  7 fam_ID_7       0.402        -0.265       -0.267        -0.703           0.211 #>  8 fam_ID_8      -0.489        -0.622       -0.882        -0.0498         -0.670 #>  9 fam_ID_9       1.00          1.17         0.394        -0.555           1.25  #> 10 fam_ID_…      -0.210         0.405        0.512        -1.04           -0.327 #> # ℹ 990 more rows #> # ℹ 20 more variables: s1_phenotype1 <dbl>, s2_phenotype1 <dbl>, #> #   mhs1_phenotype1 <dbl>, mhs2_phenotype1 <dbl>, o_phenotype1_status <lgl>, #> #   m_phenotype1_status <lgl>, mgm_phenotype1_status <lgl>, #> #   mgf_phenotype1_status <lgl>, s1_phenotype1_status <lgl>, #> #   s2_phenotype1_status <lgl>, mhs1_phenotype1_status <lgl>, #> #   mhs2_phenotype1_status <lgl>, o_phenotype1_aoo <dbl>, … #>  #>  #> $phenotype2 #> $phenotype2$sim_obs #> # A tibble: 1,000 × 26 #>    fam_ID   g_phenotype2 o_phenotype2 m_phenotype2 mgm_phenotype2 mgf_phenotype2 #>    <chr>           <dbl>        <dbl>        <dbl>          <dbl>          <dbl> #>  1 fam_ID_1      -0.0964      -0.290        -0.220         -0.820        -0.259  #>  2 fam_ID_2      -0.0480      -0.0149        0.625          0.260         1.07   #>  3 fam_ID_3      -0.406        0.941         0.587         -0.670        -0.0582 #>  4 fam_ID_4      -0.363       -0.338         1.69           1.01          0.137  #>  5 fam_ID_5       0.908        1.35          0.792          0.461        -0.771  #>  6 fam_ID_6       0.315       -0.0514       -0.552         -0.328         0.288  #>  7 fam_ID_7      -0.950       -0.129         0.515          1.33          1.85   #>  8 fam_ID_8      -0.0159      -0.567         1.02          -0.513        -1.85   #>  9 fam_ID_9      -0.581        0.112         0.142         -0.528         1.68   #> 10 fam_ID_…       0.770        0.633         1.53           1.66          0.574  #> # ℹ 990 more rows #> # ℹ 20 more variables: s1_phenotype2 <dbl>, s2_phenotype2 <dbl>, #> #   mhs1_phenotype2 <dbl>, mhs2_phenotype2 <dbl>, o_phenotype2_status <lgl>, #> #   m_phenotype2_status <lgl>, mgm_phenotype2_status <lgl>, #> #   mgf_phenotype2_status <lgl>, s1_phenotype2_status <lgl>, #> #   s2_phenotype2_status <lgl>, mhs1_phenotype2_status <lgl>, #> #   mhs2_phenotype2_status <lgl>, o_phenotype2_aoo <dbl>, … #>  #>  #> $phenotype3 #> $phenotype3$sim_obs #> # A tibble: 1,000 × 26 #>    fam_ID   g_phenotype3 o_phenotype3 m_phenotype3 mgm_phenotype3 mgf_phenotype3 #>    <chr>           <dbl>        <dbl>        <dbl>          <dbl>          <dbl> #>  1 fam_ID_1      -0.0144      -0.0573       0.130          0.0207        -0.862  #>  2 fam_ID_2       0.105       -0.232        1.72           0.366          1.80   #>  3 fam_ID_3       0.126        0.322       -0.349          0.860         -0.0310 #>  4 fam_ID_4       0.667       -0.0342       1.57          -1.03           0.448  #>  5 fam_ID_5       1.08         1.33         0.936         -0.214          0.634  #>  6 fam_ID_6       0.492        0.934        1.08           0.204          0.823  #>  7 fam_ID_7       0.560        1.76        -0.474         -0.230         -0.250  #>  8 fam_ID_8       0.501        0.737        0.0492         0.539          0.808  #>  9 fam_ID_9       1.43         1.98         2.74           2.63          -0.841  #> 10 fam_ID_…       0.228        0.624        0.524          0.944         -0.0716 #> # ℹ 990 more rows #> # ℹ 20 more variables: s1_phenotype3 <dbl>, s2_phenotype3 <dbl>, #> #   mhs1_phenotype3 <dbl>, mhs2_phenotype3 <dbl>, o_phenotype3_status <lgl>, #> #   m_phenotype3_status <lgl>, mgm_phenotype3_status <lgl>, #> #   mgf_phenotype3_status <lgl>, s1_phenotype3_status <lgl>, #> #   s2_phenotype3_status <lgl>, mhs1_phenotype3_status <lgl>, #> #   mhs2_phenotype3_status <lgl>, o_phenotype3_aoo <dbl>, … #>  #>  #> $thresholds #> # A tibble: 8,000 × 9 #>    fam_ID    indiv_ID   role  lower_phenotype1 upper_phenotype1 lower_phenotype2 #>    <chr>     <chr>      <chr>            <dbl>            <dbl>            <dbl> #>  1 fam_ID_1  fam_ID_1_1 o                 -Inf             2.87          -Inf    #>  2 fam_ID_2  fam_ID_2_1 o                 -Inf             2.87          -Inf    #>  3 fam_ID_3  fam_ID_3_1 o                 -Inf             3.31          -Inf    #>  4 fam_ID_4  fam_ID_4_1 o                 -Inf             2.43          -Inf    #>  5 fam_ID_5  fam_ID_5_1 o                 -Inf             2.59             1.35 #>  6 fam_ID_6  fam_ID_6_1 o                 -Inf             3.03          -Inf    #>  7 fam_ID_7  fam_ID_7_1 o                 -Inf             3.21          -Inf    #>  8 fam_ID_8  fam_ID_8_1 o                 -Inf             2.79          -Inf    #>  9 fam_ID_9  fam_ID_9_1 o                 -Inf             3.48          -Inf    #> 10 fam_ID_10 fam_ID_10… o                 -Inf             2.51          -Inf    #> # ℹ 7,990 more rows #> # ℹ 3 more variables: upper_phenotype2 <dbl>, lower_phenotype3 <dbl>, #> #   upper_phenotype3 <dbl> #>   simulate_under_LTM_multi(fam_vec = c(\"m\",\"f\",\"s1\"), add_ind = FALSE,  genetic_corrmat = genetic_corrmat, full_corrmat = full_corrmat, n_sim = 100) #> $phenotype1 #> $phenotype1$sim_obs #> # A tibble: 100 × 10 #>    fam_ID    m_phenotype1 f_phenotype1 s1_phenotype1 m_phenotype1_status #>    <chr>            <dbl>        <dbl>         <dbl> <lgl>               #>  1 fam_ID_1        1.29        -0.656        -0.519  TRUE                #>  2 fam_ID_2       -1.31         0.225        -0.430  FALSE               #>  3 fam_ID_3        0.187        0.435         0.220  FALSE               #>  4 fam_ID_4        0.0120       0.637        -0.231  FALSE               #>  5 fam_ID_5        0.199        1.46         -0.779  FALSE               #>  6 fam_ID_6        1.04        -1.28         -0.761  FALSE               #>  7 fam_ID_7       -0.233        0.581         0.365  FALSE               #>  8 fam_ID_8       -2.32         0.0143       -0.768  FALSE               #>  9 fam_ID_9       -0.659       -0.0169       -0.0988 FALSE               #> 10 fam_ID_10      -0.765       -0.0794       -1.73   FALSE               #> # ℹ 90 more rows #> # ℹ 5 more variables: f_phenotype1_status <lgl>, s1_phenotype1_status <lgl>, #> #   m_phenotype1_aoo <dbl>, f_phenotype1_aoo <dbl>, s1_phenotype1_aoo <dbl> #>  #>  #> $phenotype2 #> $phenotype2$sim_obs #> # A tibble: 100 × 10 #>    fam_ID    m_phenotype2 f_phenotype2 s1_phenotype2 m_phenotype2_status #>    <chr>            <dbl>        <dbl>         <dbl> <lgl>               #>  1 fam_ID_1        0.491        -1.03         0.418  FALSE               #>  2 fam_ID_2       -1.00          0.141       -0.605  FALSE               #>  3 fam_ID_3        0.991         1.35         0.787  FALSE               #>  4 fam_ID_4        0.306         0.373       -0.652  FALSE               #>  5 fam_ID_5        0.0785        1.52        -0.0798 FALSE               #>  6 fam_ID_6       -0.665        -0.928       -0.751  FALSE               #>  7 fam_ID_7       -0.587         0.732       -0.109  FALSE               #>  8 fam_ID_8        1.08         -0.769       -0.565  FALSE               #>  9 fam_ID_9       -1.52          0.369        0.487  FALSE               #> 10 fam_ID_10      -0.788         0.773       -0.322  FALSE               #> # ℹ 90 more rows #> # ℹ 5 more variables: f_phenotype2_status <lgl>, s1_phenotype2_status <lgl>, #> #   m_phenotype2_aoo <dbl>, f_phenotype2_aoo <dbl>, s1_phenotype2_aoo <dbl> #>  #>  #> $phenotype3 #> $phenotype3$sim_obs #> # A tibble: 100 × 10 #>    fam_ID    m_phenotype3 f_phenotype3 s1_phenotype3 m_phenotype3_status #>    <chr>            <dbl>        <dbl>         <dbl> <lgl>               #>  1 fam_ID_1        0.0131       -0.574        0.137  FALSE               #>  2 fam_ID_2       -0.387         0.634        0.0247 FALSE               #>  3 fam_ID_3        2.01         -0.632        1.24   TRUE                #>  4 fam_ID_4       -1.67          1.37        -1.10   FALSE               #>  5 fam_ID_5        2.31          0.246        1.48   TRUE                #>  6 fam_ID_6        0.816        -1.32        -1.25   FALSE               #>  7 fam_ID_7       -0.326         0.230       -0.565  FALSE               #>  8 fam_ID_8       -0.900        -0.895       -1.03   FALSE               #>  9 fam_ID_9       -0.689         0.190       -1.16   FALSE               #> 10 fam_ID_10      -2.11         -0.136       -1.80   FALSE               #> # ℹ 90 more rows #> # ℹ 5 more variables: f_phenotype3_status <lgl>, s1_phenotype3_status <lgl>, #> #   m_phenotype3_aoo <dbl>, f_phenotype3_aoo <dbl>, s1_phenotype3_aoo <dbl> #>  #>  #> $thresholds #> # A tibble: 300 × 9 #>    fam_ID    indiv_ID   role  lower_phenotype1 upper_phenotype1 lower_phenotype2 #>    <chr>     <chr>      <chr>            <dbl>            <dbl>            <dbl> #>  1 fam_ID_1  fam_ID_1_1 m                 1.29             1.29             -Inf #>  2 fam_ID_2  fam_ID_2_1 m              -Inf                1.64             -Inf #>  3 fam_ID_3  fam_ID_3_1 m              -Inf                1.45             -Inf #>  4 fam_ID_4  fam_ID_4_1 m              -Inf                2.13             -Inf #>  5 fam_ID_5  fam_ID_5_1 m              -Inf                2.18             -Inf #>  6 fam_ID_6  fam_ID_6_1 m              -Inf                1.44             -Inf #>  7 fam_ID_7  fam_ID_7_1 m              -Inf                1.54             -Inf #>  8 fam_ID_8  fam_ID_8_1 m              -Inf                2.26             -Inf #>  9 fam_ID_9  fam_ID_9_1 m              -Inf                1.81             -Inf #> 10 fam_ID_10 fam_ID_10… m              -Inf                2.22             -Inf #> # ℹ 290 more rows #> # ℹ 3 more variables: upper_phenotype2 <dbl>, lower_phenotype3 <dbl>, #> #   upper_phenotype3 <dbl> #>   simulate_under_LTM_multi(fam_vec = c(), n_fam = NULL, add_ind = TRUE, n_sim = 150) #> $phenotype1 #> $phenotype1$sim_obs #> # A tibble: 150 × 5 #>    fam_ID    g_phenotype1 o_phenotype1 o_phenotype1_status o_phenotype1_aoo #>    <chr>            <dbl>        <dbl> <lgl>                          <dbl> #>  1 fam_ID_1       -0.437       -0.0939 FALSE                             15 #>  2 fam_ID_2       -0.898       -0.937  FALSE                             27 #>  3 fam_ID_3       -0.144       -0.293  FALSE                             36 #>  4 fam_ID_4       -0.492       -2.29   FALSE                             34 #>  5 fam_ID_5        1.21        -0.194  FALSE                             35 #>  6 fam_ID_6       -0.331       -0.384  FALSE                             22 #>  7 fam_ID_7        1.62         1.09   FALSE                             24 #>  8 fam_ID_8        0.377       -0.485  FALSE                             12 #>  9 fam_ID_9       -0.0210      -0.167  FALSE                             15 #> 10 fam_ID_10       0.0714      -0.639  FALSE                             30 #> # ℹ 140 more rows #>  #>  #> $phenotype2 #> $phenotype2$sim_obs #> # A tibble: 150 × 5 #>    fam_ID    g_phenotype2 o_phenotype2 o_phenotype2_status o_phenotype2_aoo #>    <chr>            <dbl>        <dbl> <lgl>                          <dbl> #>  1 fam_ID_1        0.103       -0.0641 FALSE                             15 #>  2 fam_ID_2        0.523        0.384  FALSE                             27 #>  3 fam_ID_3       -0.482       -0.886  FALSE                             36 #>  4 fam_ID_4        0.565        1.10   FALSE                             34 #>  5 fam_ID_5        0.271       -0.645  FALSE                             35 #>  6 fam_ID_6       -0.946       -0.905  FALSE                             22 #>  7 fam_ID_7       -0.0989      -0.0752 FALSE                             24 #>  8 fam_ID_8        0.802        1.78   TRUE                              56 #>  9 fam_ID_9       -0.201       -0.538  FALSE                             15 #> 10 fam_ID_10      -0.452        0.795  FALSE                             30 #> # ℹ 140 more rows #>  #>  #> $phenotype3 #> $phenotype3$sim_obs #> # A tibble: 150 × 5 #>    fam_ID    g_phenotype3 o_phenotype3 o_phenotype3_status o_phenotype3_aoo #>    <chr>            <dbl>        <dbl> <lgl>                          <dbl> #>  1 fam_ID_1       -0.356      -0.0968  FALSE                             15 #>  2 fam_ID_2       -0.278      -1.13    FALSE                             27 #>  3 fam_ID_3        1.12        1.96    TRUE                              51 #>  4 fam_ID_4        1.11        0.524   FALSE                             34 #>  5 fam_ID_5        0.379       0.772   FALSE                             35 #>  6 fam_ID_6        0.0283     -0.00122 FALSE                             22 #>  7 fam_ID_7        0.248       0.807   FALSE                             24 #>  8 fam_ID_8        0.117      -1.22    FALSE                             12 #>  9 fam_ID_9       -1.12       -0.290   FALSE                             15 #> 10 fam_ID_10      -0.599      -0.880   FALSE                             30 #> # ℹ 140 more rows #>  #>  #> $thresholds #> # A tibble: 150 × 9 #>    fam_ID    indiv_ID   role  lower_phenotype1 upper_phenotype1 lower_phenotype2 #>    <chr>     <chr>      <chr>            <dbl>            <dbl>            <dbl> #>  1 fam_ID_1  fam_ID_1_1 o                 -Inf             3.38          -Inf    #>  2 fam_ID_2  fam_ID_2_1 o                 -Inf             2.95          -Inf    #>  3 fam_ID_3  fam_ID_3_1 o                 -Inf             2.59          -Inf    #>  4 fam_ID_4  fam_ID_4_1 o                 -Inf             2.68          -Inf    #>  5 fam_ID_5  fam_ID_5_1 o                 -Inf             2.63          -Inf    #>  6 fam_ID_6  fam_ID_6_1 o                 -Inf             3.14          -Inf    #>  7 fam_ID_7  fam_ID_7_1 o                 -Inf             3.06          -Inf    #>  8 fam_ID_8  fam_ID_8_1 o                 -Inf             3.48             1.78 #>  9 fam_ID_9  fam_ID_9_1 o                 -Inf             3.38          -Inf    #> 10 fam_ID_10 fam_ID_10… o                 -Inf             2.83          -Inf    #> # ℹ 140 more rows #> # ℹ 3 more variables: upper_phenotype2 <dbl>, lower_phenotype3 <dbl>, #> #   upper_phenotype3 <dbl> #>"},{"path":"EmilMiP.github.io/LTFHPlus/reference/simulate_under_LTM_single.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate under the liability threshold model (single phenotype). — simulate_under_LTM_single","title":"Simulate under the liability threshold model (single phenotype). — simulate_under_LTM_single","text":"simulate_under_LTM_single simulates families thresholds liability threshold model given family structure single phenotype. Please note possible simulate different family structures.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/simulate_under_LTM_single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate under the liability threshold model (single phenotype). — simulate_under_LTM_single","text":"","code":"simulate_under_LTM_single(   fam_vec = c(\"m\", \"f\", \"s1\", \"mgm\", \"mgf\", \"pgm\", \"pgf\"),   n_fam = NULL,   add_ind = TRUE,   h2 = 0.5,   n_sim = 1000,   pop_prev = 0.1 )"},{"path":"EmilMiP.github.io/LTFHPlus/reference/simulate_under_LTM_single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate under the liability threshold model (single phenotype). — simulate_under_LTM_single","text":"fam_vec vector strings holding different family members. family members must represented strings following list: m (Mother) f (Father) c[0-9]*.[0-9]* (Children) mgm (Maternal grandmother) mgf (Maternal grandfather) pgm (Paternal grandmother) pgf (Paternal grandfather) s[0-9]* (Full siblings) mhs[0-9]* (Half-siblings - maternal side) phs[0-9]* (Half-siblings - paternal side) mau[0-9]* (Aunts/Uncles - maternal side) pau[0-9]* (Aunts/Uncles - paternal side). Defaults c(\"m\",\"f\",\"s1\",\"mgm\",\"mgf\",\"pgm\",\"pgf\"). n_fam named vector holding desired number family members. See  setNames. names must picked list mentioned . Defaults NULL. add_ind logical scalar indicating whether genetic component full liability well full liability underlying target individual included covariance matrix. Defaults TRUE. h2 number representing liability-scale heritability single phenotype. Must non-negative. Note liability threshold model, heritability must also 1. Defaults 0.5. n_sim positive number representing number simulations. Defaults 1000. pop_prev positive number representing population prevalence, .e. overall prevalence population. Must smaller 1. Defaults 0.1.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/simulate_under_LTM_single.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate under the liability threshold model (single phenotype). — simulate_under_LTM_single","text":"either fam_vec n_fam used argument, required format, liability-scale heritability h2 number satisfying \\(0 \\leq h^2\\), n_sim strictly positive number, pop_prev positive number one, output list holding two tibbles. first tibble, sim_obs, holds simulated liabilities, disease status current age/age--onset family members n_sim families. second tibble, thresholds, holds family identifier, personal identifier, role (specified fam_vec n_fam) well lower upper thresholds individuals families. Note tibble format required estimate_liability. addition, note neither fam_vec n_fam specified, function returns disease status, current age/age--onset, lower upper thresholds, well personal identifier single individual, namely individual consideration (called o). fam_vec n_fam defined, user asked ' decide two vectors use.","code":""},{"path":[]},{"path":"EmilMiP.github.io/LTFHPlus/reference/simulate_under_LTM_single.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate under the liability threshold model (single phenotype). — simulate_under_LTM_single","text":"","code":"simulate_under_LTM_single() #> $sim_obs #> # A tibble: 1,000 × 26 #>    fam_ID      g       o       m       f       s1     mgm    mgf      pgm    pgf #>    <chr>   <dbl>   <dbl>   <dbl>   <dbl>    <dbl>   <dbl>  <dbl>    <dbl>  <dbl> #>  1 fam_I… -0.162 -0.0483  0.759  -0.0313  0.00167  0.847   0.217 -1.71    -0.597 #>  2 fam_I… -1.34   0.453  -1.40   -1.14    0.451    0.423  -0.953 -0.801   -2.70  #>  3 fam_I… -0.507  0.0789  0.420  -0.0629  0.824   -1.75    0.704  0.00638 -1.05  #>  4 fam_I…  0.700  0.153  -1.08   -1.02    1.25    -0.870  -0.373 -0.00811  0.892 #>  5 fam_I…  0.835 -0.0624  0.634   1.84    0.933    0.300   0.468 -0.277    1.85  #>  6 fam_I…  0.540  1.05    0.0659 -0.226   2.14    -1.08   -1.11  -0.354    0.854 #>  7 fam_I… -0.265  1.64    0.844   0.293  -0.777   -0.179  -0.372  1.99    -1.02  #>  8 fam_I… -1.10  -2.00   -0.205  -0.820   1.02    -0.944   1.74   0.0201  -1.19  #>  9 fam_I… -0.344  0.342   1.46    0.313   0.476   -0.0829 -0.107 -0.734    1.44  #> 10 fam_I…  0.152  1.78   -1.21   -0.510   0.949    0.204   0.130 -0.141   -0.187 #> # ℹ 990 more rows #> # ℹ 16 more variables: o_status <lgl>, m_status <lgl>, f_status <lgl>, #> #   s1_status <lgl>, mgm_status <lgl>, mgf_status <lgl>, pgm_status <lgl>, #> #   pgf_status <lgl>, o_aoo <dbl>, m_aoo <dbl>, f_aoo <dbl>, s1_aoo <dbl>, #> #   mgm_aoo <dbl>, mgf_aoo <dbl>, pgm_aoo <dbl>, pgf_aoo <dbl> #>  #> $thresholds #> # A tibble: 8,000 × 5 #>    fam_ID    indiv_ID    role    lower upper #>    <chr>     <chr>       <chr>   <dbl> <dbl> #>  1 fam_ID_1  fam_ID_1_1  o     -Inf     3.48 #>  2 fam_ID_2  fam_ID_2_1  o     -Inf     3.52 #>  3 fam_ID_3  fam_ID_3_1  o     -Inf     3.17 #>  4 fam_ID_4  fam_ID_4_1  o     -Inf     2.63 #>  5 fam_ID_5  fam_ID_5_1  o     -Inf     3.17 #>  6 fam_ID_6  fam_ID_6_1  o     -Inf     3.45 #>  7 fam_ID_7  fam_ID_7_1  o        1.64  1.64 #>  8 fam_ID_8  fam_ID_8_1  o     -Inf     3.17 #>  9 fam_ID_9  fam_ID_9_1  o     -Inf     3.52 #> 10 fam_ID_10 fam_ID_10_1 o        1.78  1.78 #> # ℹ 7,990 more rows #>  simulate_under_LTM_single(fam_vec = NULL, n_fam = stats::setNames(c(1,1,1,2),  c(\"m\",\"mgm\",\"mgf\",\"mhs\"))) #> $sim_obs #> # A tibble: 1,000 × 20 #>    fam_ID          g      o       m     mgm     mgf   mhs1    mhs2 o_status #>    <chr>       <dbl>  <dbl>   <dbl>   <dbl>   <dbl>  <dbl>   <dbl> <lgl>    #>  1 fam_ID_1  -0.694   0.528 -0.479  -0.567   1.08   -0.917  0.253  FALSE    #>  2 fam_ID_2  -1.11   -0.771 -0.416  -0.574  -1.18   -0.428 -0.0341 FALSE    #>  3 fam_ID_3   0.916   1.55  -0.562   0.0641 -0.0181 -0.703  0.658  TRUE     #>  4 fam_ID_4  -0.0715  0.381 -0.0298 -0.621   0.693   0.255 -1.17   FALSE    #>  5 fam_ID_5  -0.833  -2.43  -0.918   1.04   -1.18    0.825  1.32   FALSE    #>  6 fam_ID_6  -0.815  -0.727 -0.960  -0.534  -0.110   0.858 -0.300  FALSE    #>  7 fam_ID_7   0.484   0.364 -1.02    0.0125  1.66   -0.101 -0.632  FALSE    #>  8 fam_ID_8   0.248   1.59  -1.30    0.592   1.96    0.466 -0.588  TRUE     #>  9 fam_ID_9   0.482  -0.658  0.171   1.66    1.04    0.697  1.42   FALSE    #> 10 fam_ID_10  0.219   1.12  -0.375   0.856  -1.30   -1.66  -1.01   FALSE    #> # ℹ 990 more rows #> # ℹ 11 more variables: m_status <lgl>, mgm_status <lgl>, mgf_status <lgl>, #> #   mhs1_status <lgl>, mhs2_status <lgl>, o_aoo <dbl>, m_aoo <dbl>, #> #   mgm_aoo <dbl>, mgf_aoo <dbl>, mhs1_aoo <dbl>, mhs2_aoo <dbl> #>  #> $thresholds #> # A tibble: 6,000 × 5 #>    fam_ID    indiv_ID    role    lower upper #>    <chr>     <chr>       <chr>   <dbl> <dbl> #>  1 fam_ID_1  fam_ID_1_1  o     -Inf     3.35 #>  2 fam_ID_2  fam_ID_2_1  o     -Inf     2.95 #>  3 fam_ID_3  fam_ID_3_1  o        1.54  1.54 #>  4 fam_ID_4  fam_ID_4_1  o     -Inf     2.99 #>  5 fam_ID_5  fam_ID_5_1  o     -Inf     3.10 #>  6 fam_ID_6  fam_ID_6_1  o     -Inf     2.55 #>  7 fam_ID_7  fam_ID_7_1  o     -Inf     2.63 #>  8 fam_ID_8  fam_ID_8_1  o        1.59  1.59 #>  9 fam_ID_9  fam_ID_9_1  o     -Inf     3.28 #> 10 fam_ID_10 fam_ID_10_1 o     -Inf     2.91 #> # ℹ 5,990 more rows #>  simulate_under_LTM_single(fam_vec = c(\"m\",\"f\",\"s1\"), n_fam = NULL, add_ind = FALSE,  h2 = 0.5, n_sim = 500, pop_prev = .05) #> $sim_obs #> # A tibble: 500 × 10 #>    fam_ID          m        f      s1 m_status f_status s1_status m_aoo f_aoo #>    <chr>       <dbl>    <dbl>   <dbl> <lgl>    <lgl>    <lgl>     <dbl> <dbl> #>  1 fam_ID_1   1.25   -0.620   -0.954  FALSE    FALSE    FALSE        36    44 #>  2 fam_ID_2  -0.335  -1.60    -0.232  FALSE    FALSE    FALSE        39    36 #>  3 fam_ID_3  -0.0678 -0.236   -0.241  FALSE    FALSE    FALSE        63    57 #>  4 fam_ID_4  -0.236  -1.00    -0.0947 FALSE    FALSE    FALSE        52    63 #>  5 fam_ID_5   0.0888  0.429    0.640  FALSE    FALSE    FALSE        39    31 #>  6 fam_ID_6   1.17    0.393    1.28   FALSE    FALSE    FALSE        57    55 #>  7 fam_ID_7  -0.722  -0.00746  0.531  FALSE    FALSE    FALSE        41    42 #>  8 fam_ID_8  -0.904   1.52     0.851  FALSE    FALSE    FALSE        50    49 #>  9 fam_ID_9   0.696   0.848   -0.945  FALSE    FALSE    FALSE        49    49 #> 10 fam_ID_10 -0.511  -1.51    -1.56   FALSE    FALSE    FALSE        46    57 #> # ℹ 490 more rows #> # ℹ 1 more variable: s1_aoo <dbl> #>  #> $thresholds #> # A tibble: 1,500 × 5 #>    fam_ID    indiv_ID    role  lower upper #>    <chr>     <chr>       <chr> <dbl> <dbl> #>  1 fam_ID_1  fam_ID_1_1  m      -Inf  2.82 #>  2 fam_ID_2  fam_ID_2_1  m      -Inf  2.71 #>  3 fam_ID_3  fam_ID_3_1  m      -Inf  1.89 #>  4 fam_ID_4  fam_ID_4_1  m      -Inf  2.21 #>  5 fam_ID_5  fam_ID_5_1  m      -Inf  2.71 #>  6 fam_ID_6  fam_ID_6_1  m      -Inf  2.05 #>  7 fam_ID_7  fam_ID_7_1  m      -Inf  2.63 #>  8 fam_ID_8  fam_ID_8_1  m      -Inf  2.29 #>  9 fam_ID_9  fam_ID_9_1  m      -Inf  2.32 #> 10 fam_ID_10 fam_ID_10_1 m      -Inf  2.44 #> # ℹ 1,490 more rows #>  simulate_under_LTM_single(fam_vec = c(), n_fam = NULL, add_ind = TRUE, h2 = 0.5,  n_sim = 200, pop_prev = 0.05) #> Warning: Neither fam_vec nor n_fam is specified... #> $sim_obs #> # A tibble: 200 × 5 #>    fam_ID           g       o o_status o_aoo #>    <chr>        <dbl>   <dbl> <lgl>    <dbl> #>  1 fam_ID_1  -0.343   -1.46   FALSE       22 #>  2 fam_ID_2  -0.00162 -0.361  FALSE       32 #>  3 fam_ID_3  -0.881   -1.82   FALSE       25 #>  4 fam_ID_4   0.669    0.315  FALSE       36 #>  5 fam_ID_5   0.627    0.964  FALSE       22 #>  6 fam_ID_6  -0.157   -0.422  FALSE       29 #>  7 fam_ID_7  -0.582   -0.628  FALSE       26 #>  8 fam_ID_8  -0.366    0.149  FALSE       38 #>  9 fam_ID_9   0.921    0.709  FALSE       15 #> 10 fam_ID_10  0.733   -0.0112 FALSE       32 #> # ℹ 190 more rows #>  #> $thresholds #> # A tibble: 200 × 5 #>    fam_ID    indiv_ID    role  lower upper #>    <chr>     <chr>       <chr> <dbl> <dbl> #>  1 fam_ID_1  fam_ID_1_1  o      -Inf  3.33 #>  2 fam_ID_2  fam_ID_2_1  o      -Inf  2.97 #>  3 fam_ID_3  fam_ID_3_1  o      -Inf  3.23 #>  4 fam_ID_4  fam_ID_4_1  o      -Inf  2.82 #>  5 fam_ID_5  fam_ID_5_1  o      -Inf  3.33 #>  6 fam_ID_6  fam_ID_6_1  o      -Inf  3.09 #>  7 fam_ID_7  fam_ID_7_1  o      -Inf  3.19 #>  8 fam_ID_8  fam_ID_8_1  o      -Inf  2.75 #>  9 fam_ID_9  fam_ID_9_1  o      -Inf  3.57 #> 10 fam_ID_10 fam_ID_10_1 o      -Inf  2.97 #> # ℹ 190 more rows #>"},{"path":"EmilMiP.github.io/LTFHPlus/reference/truncated_normal_cdf.html","id":null,"dir":"Reference","previous_headings":"","what":"CDF for truncated normal distribution. — truncated_normal_cdf","title":"CDF for truncated normal distribution. — truncated_normal_cdf","text":"truncated_normal_cdf computes cumulative density function truncated normal distribution.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/truncated_normal_cdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CDF for truncated normal distribution. — truncated_normal_cdf","text":"","code":"truncated_normal_cdf(   liability,   lower = stats::qnorm(0.05, lower.tail = FALSE),   upper = Inf )"},{"path":"EmilMiP.github.io/LTFHPlus/reference/truncated_normal_cdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CDF for truncated normal distribution. — truncated_normal_cdf","text":"liability number representing individual's true underlying liability. lower number representing lower cutoff point truncated normal distribution. Defaults 1.645 (stats::qnorm(0.05, lower.tail = FALSE)). upper number representing upper cutoff point truncated normal distribution. Must greater equal lower. Defaults Inf.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/truncated_normal_cdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CDF for truncated normal distribution. — truncated_normal_cdf","text":"liability number lower upper cutoff points numbers satisfying lower <= upper, truncated_normal_cdf returns probability liability take value less equal liability.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/truncated_normal_cdf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"CDF for truncated normal distribution. — truncated_normal_cdf","text":"function can used compute value cumulative density function truncated normal distribution given individual's true underlying liability.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/reference/truncated_normal_cdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CDF for truncated normal distribution. — truncated_normal_cdf","text":"","code":"curve(sapply(liability, truncated_normal_cdf), from = qnorm(0.05, lower.tail = FALSE), to = 3.5,  xname = \"liability\")"},{"path":"EmilMiP.github.io/LTFHPlus/news/index.html","id":"changes-in-v213","dir":"Changelog","previous_headings":"","what":"Changes in v2.1.3","title":"Changes in v2.1.3","text":"Added , converts graph trio information .","code":""},{"path":"EmilMiP.github.io/LTFHPlus/news/index.html","id":"changes-in-v212","dir":"Changelog","previous_headings":"","what":"Changes in v2.1.2","title":"Changes in v2.1.2","text":"CRAN release: 2024-11-22 Fixed unrecognised language description. shortened version scheme per CRAN request.","code":""},{"path":"EmilMiP.github.io/LTFHPlus/news/index.html","id":"ltfhplus-v211","dir":"Changelog","previous_headings":"","what":"LTFHPlus v2.1.1","title":"LTFHPlus v2.1.1","text":"CRAN release: 2024-02-12 Initial CRAN submission.","code":""}]
